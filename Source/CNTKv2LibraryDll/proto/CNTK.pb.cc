// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CNTK.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CNTK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CNTK {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* NDShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NDShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* Axis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Axis_reflection_ = NULL;
const ::google::protobuf::Descriptor* NDArrayView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NDArrayView_reflection_ = NULL;
struct NDArrayViewOneofInstance {
  const ::CNTK::proto::NDArrayView_FloatValues* float_values_;
  const ::CNTK::proto::NDArrayView_DoubleValues* double_values_;
}* NDArrayView_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* NDArrayView_FloatValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NDArrayView_FloatValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* NDArrayView_DoubleValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NDArrayView_DoubleValues_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NDArrayView_DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NDArrayView_StorageFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dictionary_DataEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DictionaryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictionaryValue_reflection_ = NULL;
struct DictionaryValueOneofInstance {
  bool bool_value_;
  ::google::protobuf::int32 int_value_;
  ::google::protobuf::uint64 size_t_value_;
  float float_value_;
  double double_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  const ::CNTK::proto::NDShape* nd_shape_value_;
  const ::CNTK::proto::Axis* axis_value_;
  const ::CNTK::proto::Vector* vector_value_;
  const ::CNTK::proto::Dictionary* dictionary_value_;
  const ::CNTK::proto::NDArrayView* nd_array_view_value_;
}* DictionaryValue_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* DictionaryValue_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CNTK_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CNTK_2eproto() {
  protobuf_AddDesc_CNTK_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CNTK.proto");
  GOOGLE_CHECK(file != NULL);
  NDShape_descriptor_ = file->message_type(0);
  static const int NDShape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDShape, shape_dim_),
  };
  NDShape_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NDShape_descriptor_,
      NDShape::internal_default_instance(),
      NDShape_offsets_,
      -1,
      -1,
      -1,
      sizeof(NDShape),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDShape, _internal_metadata_));
  Axis_descriptor_ = file->message_type(1);
  static const int Axis_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, static_axis_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, is_ordered_dynamic_axis_),
  };
  Axis_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Axis_descriptor_,
      Axis::internal_default_instance(),
      Axis_offsets_,
      -1,
      -1,
      -1,
      sizeof(Axis),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, _internal_metadata_));
  NDArrayView_descriptor_ = file->message_type(2);
  static const int NDArrayView_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView, storage_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView, shape_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NDArrayView_default_oneof_instance_, float_values_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NDArrayView_default_oneof_instance_, double_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView, values_),
  };
  NDArrayView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NDArrayView_descriptor_,
      NDArrayView::internal_default_instance(),
      NDArrayView_offsets_,
      -1,
      -1,
      -1,
      NDArrayView_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView, _oneof_case_[0]),
      sizeof(NDArrayView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView, _internal_metadata_));
  NDArrayView_FloatValues_descriptor_ = NDArrayView_descriptor_->nested_type(0);
  static const int NDArrayView_FloatValues_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView_FloatValues, value_),
  };
  NDArrayView_FloatValues_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NDArrayView_FloatValues_descriptor_,
      NDArrayView_FloatValues::internal_default_instance(),
      NDArrayView_FloatValues_offsets_,
      -1,
      -1,
      -1,
      sizeof(NDArrayView_FloatValues),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView_FloatValues, _internal_metadata_));
  NDArrayView_DoubleValues_descriptor_ = NDArrayView_descriptor_->nested_type(1);
  static const int NDArrayView_DoubleValues_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView_DoubleValues, value_),
  };
  NDArrayView_DoubleValues_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NDArrayView_DoubleValues_descriptor_,
      NDArrayView_DoubleValues::internal_default_instance(),
      NDArrayView_DoubleValues_offsets_,
      -1,
      -1,
      -1,
      sizeof(NDArrayView_DoubleValues),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDArrayView_DoubleValues, _internal_metadata_));
  NDArrayView_DataType_descriptor_ = NDArrayView_descriptor_->enum_type(0);
  NDArrayView_StorageFormat_descriptor_ = NDArrayView_descriptor_->enum_type(1);
  Vector_descriptor_ = file->message_type(3);
  static const int Vector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, value_),
  };
  Vector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector_descriptor_,
      Vector::internal_default_instance(),
      Vector_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _internal_metadata_));
  Dictionary_descriptor_ = file->message_type(4);
  static const int Dictionary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, data_),
  };
  Dictionary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Dictionary_descriptor_,
      Dictionary::internal_default_instance(),
      Dictionary_offsets_,
      -1,
      -1,
      -1,
      sizeof(Dictionary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, _internal_metadata_));
  Dictionary_DataEntry_descriptor_ = Dictionary_descriptor_->nested_type(0);
  DictionaryValue_descriptor_ = file->message_type(5);
  static const int DictionaryValue_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryValue, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryValue, value_type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, bool_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, int_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, size_t_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, float_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, double_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, string_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, nd_shape_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, axis_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, vector_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, dictionary_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DictionaryValue_default_oneof_instance_, nd_array_view_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryValue, value_),
  };
  DictionaryValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DictionaryValue_descriptor_,
      DictionaryValue::internal_default_instance(),
      DictionaryValue_offsets_,
      -1,
      -1,
      -1,
      DictionaryValue_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryValue, _oneof_case_[0]),
      sizeof(DictionaryValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryValue, _internal_metadata_));
  DictionaryValue_Type_descriptor_ = DictionaryValue_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CNTK_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NDShape_descriptor_, NDShape::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Axis_descriptor_, Axis::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NDArrayView_descriptor_, NDArrayView::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NDArrayView_FloatValues_descriptor_, NDArrayView_FloatValues::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NDArrayView_DoubleValues_descriptor_, NDArrayView_DoubleValues::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector_descriptor_, Vector::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Dictionary_descriptor_, Dictionary::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Dictionary_DataEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::CNTK::proto::DictionaryValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Dictionary_DataEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DictionaryValue_descriptor_, DictionaryValue::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CNTK_2eproto() {
  NDShape_default_instance_.Shutdown();
  delete NDShape_reflection_;
  Axis_default_instance_.Shutdown();
  delete Axis_reflection_;
  NDArrayView_default_instance_.Shutdown();
  delete NDArrayView_default_oneof_instance_;
  delete NDArrayView_reflection_;
  NDArrayView_FloatValues_default_instance_.Shutdown();
  delete NDArrayView_FloatValues_reflection_;
  NDArrayView_DoubleValues_default_instance_.Shutdown();
  delete NDArrayView_DoubleValues_reflection_;
  Vector_default_instance_.Shutdown();
  delete Vector_reflection_;
  Dictionary_default_instance_.Shutdown();
  delete Dictionary_reflection_;
  DictionaryValue_default_instance_.Shutdown();
  delete DictionaryValue_default_oneof_instance_;
  delete DictionaryValue_reflection_;
}

void protobuf_InitDefaults_CNTK_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  NDShape_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Axis_default_instance_.DefaultConstruct();
  NDArrayView_default_instance_.DefaultConstruct();
  NDArrayView_default_oneof_instance_ = new NDArrayViewOneofInstance();
  NDArrayView_FloatValues_default_instance_.DefaultConstruct();
  NDArrayView_DoubleValues_default_instance_.DefaultConstruct();
  Vector_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Dictionary_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DictionaryValue_default_instance_.DefaultConstruct();
  DictionaryValue_default_oneof_instance_ = new DictionaryValueOneofInstance();
  NDShape_default_instance_.get_mutable()->InitAsDefaultInstance();
  Axis_default_instance_.get_mutable()->InitAsDefaultInstance();
  NDArrayView_default_instance_.get_mutable()->InitAsDefaultInstance();
  NDArrayView_FloatValues_default_instance_.get_mutable()->InitAsDefaultInstance();
  NDArrayView_DoubleValues_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector_default_instance_.get_mutable()->InitAsDefaultInstance();
  Dictionary_default_instance_.get_mutable()->InitAsDefaultInstance();
  DictionaryValue_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_CNTK_2eproto_once_);
void protobuf_InitDefaults_CNTK_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_CNTK_2eproto_once_,
                 &protobuf_InitDefaults_CNTK_2eproto_impl);
}
void protobuf_AddDesc_CNTK_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_CNTK_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nCNTK.proto\022\nCNTK.proto\" \n\007NDShape\022\025\n\ts"
    "hape_dim\030\001 \003(\004B\002\020\001\"N\n\004Axis\022\027\n\017static_axi"
    "s_idx\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\037\n\027is_ordered_"
    "dynamic_axis\030\003 \001(\010\"\337\003\n\013NDArrayView\0223\n\tda"
    "ta_type\030\001 \001(\0162 .CNTK.proto.NDArrayView.D"
    "ataType\022=\n\016storage_format\030\002 \001(\0162%.CNTK.p"
    "roto.NDArrayView.StorageFormat\022\"\n\005shape\030"
    "\003 \001(\0132\023.CNTK.proto.NDShape\022;\n\014float_valu"
    "es\030\004 \001(\0132#.CNTK.proto.NDArrayView.FloatV"
    "aluesH\000\022=\n\rdouble_values\030\005 \001(\0132$.CNTK.pr"
    "oto.NDArrayView.DoubleValuesH\000\032 \n\013FloatV"
    "alues\022\021\n\005value\030\001 \003(\002B\002\020\001\032!\n\014DoubleValues"
    "\022\021\n\005value\030\001 \003(\001B\002\020\001\".\n\010DataType\022\013\n\007Unkno"
    "wn\020\000\022\t\n\005Float\020\001\022\n\n\006Double\020\002\"=\n\rStorageFo"
    "rmat\022\t\n\005Dense\020\000\022\r\n\tSparseCSC\020\001\022\022\n\016Sparse"
    "BlockCol\020\002B\010\n\006values\"4\n\006Vector\022*\n\005value\030"
    "\001 \003(\0132\033.CNTK.proto.DictionaryValue\"\227\001\n\nD"
    "ictionary\022\017\n\007version\030\001 \001(\004\022.\n\004data\030\002 \003(\013"
    "2 .CNTK.proto.Dictionary.DataEntry\032H\n\tDa"
    "taEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.CN"
    "TK.proto.DictionaryValue:\0028\001\"\362\004\n\017Diction"
    "aryValue\022\017\n\007version\030\001 \001(\004\0224\n\nvalue_type\030"
    "\002 \001(\0162 .CNTK.proto.DictionaryValue.Type\022"
    "\024\n\nbool_value\030\003 \001(\010H\000\022\023\n\tint_value\030\004 \001(\005"
    "H\000\022\026\n\014size_t_value\030\005 \001(\004H\000\022\025\n\013float_valu"
    "e\030\006 \001(\002H\000\022\026\n\014double_value\030\007 \001(\001H\000\022\026\n\014str"
    "ing_value\030\010 \001(\tH\000\022-\n\016nd_shape_value\030\t \001("
    "\0132\023.CNTK.proto.NDShapeH\000\022&\n\naxis_value\030\n"
    " \001(\0132\020.CNTK.proto.AxisH\000\022*\n\014vector_value"
    "\030\013 \001(\0132\022.CNTK.proto.VectorH\000\0222\n\020dictiona"
    "ry_value\030\014 \001(\0132\026.CNTK.proto.DictionaryH\000"
    "\0226\n\023nd_array_view_value\030\r \001(\0132\027.CNTK.pro"
    "to.NDArrayViewH\000\"\225\001\n\004Type\022\010\n\004None\020\000\022\010\n\004B"
    "ool\020\001\022\007\n\003Int\020\002\022\t\n\005SizeT\020\003\022\t\n\005Float\020\004\022\n\n\006"
    "Double\020\005\022\n\n\006String\020\006\022\013\n\007NDShape\020\007\022\010\n\004Axi"
    "s\020\010\022\n\n\006Vector\020\t\022\016\n\nDictionary\020\n\022\017\n\013NDArr"
    "ayView\020\013B\007\n\005valueb\006proto3", 1465);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CNTK.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CNTK_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CNTK_2eproto_once_);
void protobuf_AddDesc_CNTK_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CNTK_2eproto_once_,
                 &protobuf_AddDesc_CNTK_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CNTK_2eproto {
  StaticDescriptorInitializer_CNTK_2eproto() {
    protobuf_AddDesc_CNTK_2eproto();
  }
} static_descriptor_initializer_CNTK_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NDShape::kShapeDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NDShape::NDShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CNTK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNTK.proto.NDShape)
}

void NDShape::InitAsDefaultInstance() {
}

NDShape::NDShape(const NDShape& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDShape)
}

void NDShape::SharedCtor() {
  _cached_size_ = 0;
}

NDShape::~NDShape() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDShape)
  SharedDtor();
}

void NDShape::SharedDtor() {
}

void NDShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NDShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NDShape_descriptor_;
}

const NDShape& NDShape::default_instance() {
  protobuf_InitDefaults_CNTK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NDShape> NDShape_default_instance_;

NDShape* NDShape::New(::google::protobuf::Arena* arena) const {
  NDShape* n = new NDShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NDShape::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDShape)
  shape_dim_.Clear();
}

bool NDShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNTK.proto.NDShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 shape_dim = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_shape_dim())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_shape_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNTK.proto.NDShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNTK.proto.NDShape)
  return false;
#undef DO_
}

void NDShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNTK.proto.NDShape)
  // repeated uint64 shape_dim = 1 [packed = true];
  if (this->shape_dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->shape_dim(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CNTK.proto.NDShape)
}

::google::protobuf::uint8* NDShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDShape)
  // repeated uint64 shape_dim = 1 [packed = true];
  if (this->shape_dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->shape_dim(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDShape)
  return target;
}

size_t NDShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDShape)
  size_t total_size = 0;

  // repeated uint64 shape_dim = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->shape_dim_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->shape_dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_dim_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NDShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDShape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NDShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NDShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDShape)
    UnsafeMergeFrom(*source);
  }
}

void NDShape::MergeFrom(const NDShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDShape)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NDShape::UnsafeMergeFrom(const NDShape& from) {
  GOOGLE_DCHECK(&from != this);
  shape_dim_.UnsafeMergeFrom(from.shape_dim_);
}

void NDShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDShape::CopyFrom(const NDShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDShape)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NDShape::IsInitialized() const {

  return true;
}

void NDShape::Swap(NDShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NDShape::InternalSwap(NDShape* other) {
  shape_dim_.UnsafeArenaSwap(&other->shape_dim_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NDShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NDShape_descriptor_;
  metadata.reflection = NDShape_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NDShape

// repeated uint64 shape_dim = 1 [packed = true];
int NDShape::shape_dim_size() const {
  return shape_dim_.size();
}
void NDShape::clear_shape_dim() {
  shape_dim_.Clear();
}
::google::protobuf::uint64 NDShape::shape_dim(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDShape.shape_dim)
  return shape_dim_.Get(index);
}
void NDShape::set_shape_dim(int index, ::google::protobuf::uint64 value) {
  shape_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDShape.shape_dim)
}
void NDShape::add_shape_dim(::google::protobuf::uint64 value) {
  shape_dim_.Add(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDShape.shape_dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NDShape::shape_dim() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDShape.shape_dim)
  return shape_dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NDShape::mutable_shape_dim() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDShape.shape_dim)
  return &shape_dim_;
}

inline const NDShape* NDShape::internal_default_instance() {
  return &NDShape_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Axis::kStaticAxisIdxFieldNumber;
const int Axis::kNameFieldNumber;
const int Axis::kIsOrderedDynamicAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Axis::Axis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CNTK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNTK.proto.Axis)
}

void Axis::InitAsDefaultInstance() {
}

Axis::Axis(const Axis& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.Axis)
}

void Axis::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&static_axis_idx_, 0, reinterpret_cast<char*>(&is_ordered_dynamic_axis_) -
    reinterpret_cast<char*>(&static_axis_idx_) + sizeof(is_ordered_dynamic_axis_));
  _cached_size_ = 0;
}

Axis::~Axis() {
  // @@protoc_insertion_point(destructor:CNTK.proto.Axis)
  SharedDtor();
}

void Axis::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Axis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Axis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Axis_descriptor_;
}

const Axis& Axis::default_instance() {
  protobuf_InitDefaults_CNTK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Axis> Axis_default_instance_;

Axis* Axis::New(::google::protobuf::Arena* arena) const {
  Axis* n = new Axis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.Axis)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Axis, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Axis*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(static_axis_idx_, is_ordered_dynamic_axis_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Axis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNTK.proto.Axis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 static_axis_idx = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &static_axis_idx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CNTK.proto.Axis.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_ordered_dynamic_axis;
        break;
      }

      // optional bool is_ordered_dynamic_axis = 3;
      case 3: {
        if (tag == 24) {
         parse_is_ordered_dynamic_axis:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ordered_dynamic_axis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNTK.proto.Axis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNTK.proto.Axis)
  return false;
#undef DO_
}

void Axis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNTK.proto.Axis)
  // optional int32 static_axis_idx = 1;
  if (this->static_axis_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->static_axis_idx(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CNTK.proto.Axis.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool is_ordered_dynamic_axis = 3;
  if (this->is_ordered_dynamic_axis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ordered_dynamic_axis(), output);
  }

  // @@protoc_insertion_point(serialize_end:CNTK.proto.Axis)
}

::google::protobuf::uint8* Axis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.Axis)
  // optional int32 static_axis_idx = 1;
  if (this->static_axis_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->static_axis_idx(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CNTK.proto.Axis.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool is_ordered_dynamic_axis = 3;
  if (this->is_ordered_dynamic_axis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ordered_dynamic_axis(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.Axis)
  return target;
}

size_t Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.Axis)
  size_t total_size = 0;

  // optional int32 static_axis_idx = 1;
  if (this->static_axis_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->static_axis_idx());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bool is_ordered_dynamic_axis = 3;
  if (this->is_ordered_dynamic_axis() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Axis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.Axis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Axis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Axis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.Axis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.Axis)
    UnsafeMergeFrom(*source);
  }
}

void Axis::MergeFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.Axis)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Axis::UnsafeMergeFrom(const Axis& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.static_axis_idx() != 0) {
    set_static_axis_idx(from.static_axis_idx());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.is_ordered_dynamic_axis() != 0) {
    set_is_ordered_dynamic_axis(from.is_ordered_dynamic_axis());
  }
}

void Axis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Axis::CopyFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.Axis)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Axis::IsInitialized() const {

  return true;
}

void Axis::Swap(Axis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Axis::InternalSwap(Axis* other) {
  std::swap(static_axis_idx_, other->static_axis_idx_);
  name_.Swap(&other->name_);
  std::swap(is_ordered_dynamic_axis_, other->is_ordered_dynamic_axis_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Axis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Axis_descriptor_;
  metadata.reflection = Axis_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Axis

// optional int32 static_axis_idx = 1;
void Axis::clear_static_axis_idx() {
  static_axis_idx_ = 0;
}
::google::protobuf::int32 Axis::static_axis_idx() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.static_axis_idx)
  return static_axis_idx_;
}
void Axis::set_static_axis_idx(::google::protobuf::int32 value) {
  
  static_axis_idx_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.static_axis_idx)
}

// optional string name = 2;
void Axis::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Axis::name() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Axis::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.name)
}
void Axis::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNTK.proto.Axis.name)
}
void Axis::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNTK.proto.Axis.name)
}
::std::string* Axis::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CNTK.proto.Axis.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Axis::release_name() {
  // @@protoc_insertion_point(field_release:CNTK.proto.Axis.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Axis::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.Axis.name)
}

// optional bool is_ordered_dynamic_axis = 3;
void Axis::clear_is_ordered_dynamic_axis() {
  is_ordered_dynamic_axis_ = false;
}
bool Axis::is_ordered_dynamic_axis() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.is_ordered_dynamic_axis)
  return is_ordered_dynamic_axis_;
}
void Axis::set_is_ordered_dynamic_axis(bool value) {
  
  is_ordered_dynamic_axis_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.is_ordered_dynamic_axis)
}

inline const Axis* Axis::internal_default_instance() {
  return &Axis_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NDArrayView_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NDArrayView_DataType_descriptor_;
}
bool NDArrayView_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NDArrayView_DataType NDArrayView::Unknown;
const NDArrayView_DataType NDArrayView::Float;
const NDArrayView_DataType NDArrayView::Double;
const NDArrayView_DataType NDArrayView::DataType_MIN;
const NDArrayView_DataType NDArrayView::DataType_MAX;
const int NDArrayView::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NDArrayView_StorageFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NDArrayView_StorageFormat_descriptor_;
}
bool NDArrayView_StorageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NDArrayView_StorageFormat NDArrayView::Dense;
const NDArrayView_StorageFormat NDArrayView::SparseCSC;
const NDArrayView_StorageFormat NDArrayView::SparseBlockCol;
const NDArrayView_StorageFormat NDArrayView::StorageFormat_MIN;
const NDArrayView_StorageFormat NDArrayView::StorageFormat_MAX;
const int NDArrayView::StorageFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NDArrayView_FloatValues::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NDArrayView_FloatValues::NDArrayView_FloatValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CNTK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNTK.proto.NDArrayView.FloatValues)
}

void NDArrayView_FloatValues::InitAsDefaultInstance() {
}

NDArrayView_FloatValues::NDArrayView_FloatValues(const NDArrayView_FloatValues& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDArrayView.FloatValues)
}

void NDArrayView_FloatValues::SharedCtor() {
  _cached_size_ = 0;
}

NDArrayView_FloatValues::~NDArrayView_FloatValues() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDArrayView.FloatValues)
  SharedDtor();
}

void NDArrayView_FloatValues::SharedDtor() {
}

void NDArrayView_FloatValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NDArrayView_FloatValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NDArrayView_FloatValues_descriptor_;
}

const NDArrayView_FloatValues& NDArrayView_FloatValues::default_instance() {
  protobuf_InitDefaults_CNTK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NDArrayView_FloatValues> NDArrayView_FloatValues_default_instance_;

NDArrayView_FloatValues* NDArrayView_FloatValues::New(::google::protobuf::Arena* arena) const {
  NDArrayView_FloatValues* n = new NDArrayView_FloatValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NDArrayView_FloatValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDArrayView.FloatValues)
  value_.Clear();
}

bool NDArrayView_FloatValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNTK.proto.NDArrayView.FloatValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNTK.proto.NDArrayView.FloatValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNTK.proto.NDArrayView.FloatValues)
  return false;
#undef DO_
}

void NDArrayView_FloatValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNTK.proto.NDArrayView.FloatValues)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CNTK.proto.NDArrayView.FloatValues)
}

::google::protobuf::uint8* NDArrayView_FloatValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDArrayView.FloatValues)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDArrayView.FloatValues)
  return target;
}

size_t NDArrayView_FloatValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDArrayView.FloatValues)
  size_t total_size = 0;

  // repeated float value = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NDArrayView_FloatValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDArrayView.FloatValues)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NDArrayView_FloatValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NDArrayView_FloatValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDArrayView.FloatValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDArrayView.FloatValues)
    UnsafeMergeFrom(*source);
  }
}

void NDArrayView_FloatValues::MergeFrom(const NDArrayView_FloatValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDArrayView.FloatValues)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NDArrayView_FloatValues::UnsafeMergeFrom(const NDArrayView_FloatValues& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void NDArrayView_FloatValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDArrayView.FloatValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayView_FloatValues::CopyFrom(const NDArrayView_FloatValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDArrayView.FloatValues)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NDArrayView_FloatValues::IsInitialized() const {

  return true;
}

void NDArrayView_FloatValues::Swap(NDArrayView_FloatValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NDArrayView_FloatValues::InternalSwap(NDArrayView_FloatValues* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NDArrayView_FloatValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NDArrayView_FloatValues_descriptor_;
  metadata.reflection = NDArrayView_FloatValues_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NDArrayView_DoubleValues::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NDArrayView_DoubleValues::NDArrayView_DoubleValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CNTK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNTK.proto.NDArrayView.DoubleValues)
}

void NDArrayView_DoubleValues::InitAsDefaultInstance() {
}

NDArrayView_DoubleValues::NDArrayView_DoubleValues(const NDArrayView_DoubleValues& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDArrayView.DoubleValues)
}

void NDArrayView_DoubleValues::SharedCtor() {
  _cached_size_ = 0;
}

NDArrayView_DoubleValues::~NDArrayView_DoubleValues() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDArrayView.DoubleValues)
  SharedDtor();
}

void NDArrayView_DoubleValues::SharedDtor() {
}

void NDArrayView_DoubleValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NDArrayView_DoubleValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NDArrayView_DoubleValues_descriptor_;
}

const NDArrayView_DoubleValues& NDArrayView_DoubleValues::default_instance() {
  protobuf_InitDefaults_CNTK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NDArrayView_DoubleValues> NDArrayView_DoubleValues_default_instance_;

NDArrayView_DoubleValues* NDArrayView_DoubleValues::New(::google::protobuf::Arena* arena) const {
  NDArrayView_DoubleValues* n = new NDArrayView_DoubleValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NDArrayView_DoubleValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDArrayView.DoubleValues)
  value_.Clear();
}

bool NDArrayView_DoubleValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNTK.proto.NDArrayView.DoubleValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNTK.proto.NDArrayView.DoubleValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNTK.proto.NDArrayView.DoubleValues)
  return false;
#undef DO_
}

void NDArrayView_DoubleValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNTK.proto.NDArrayView.DoubleValues)
  // repeated double value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CNTK.proto.NDArrayView.DoubleValues)
}

::google::protobuf::uint8* NDArrayView_DoubleValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDArrayView.DoubleValues)
  // repeated double value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDArrayView.DoubleValues)
  return target;
}

size_t NDArrayView_DoubleValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDArrayView.DoubleValues)
  size_t total_size = 0;

  // repeated double value = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NDArrayView_DoubleValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDArrayView.DoubleValues)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NDArrayView_DoubleValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NDArrayView_DoubleValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDArrayView.DoubleValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDArrayView.DoubleValues)
    UnsafeMergeFrom(*source);
  }
}

void NDArrayView_DoubleValues::MergeFrom(const NDArrayView_DoubleValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDArrayView.DoubleValues)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NDArrayView_DoubleValues::UnsafeMergeFrom(const NDArrayView_DoubleValues& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void NDArrayView_DoubleValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDArrayView.DoubleValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayView_DoubleValues::CopyFrom(const NDArrayView_DoubleValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDArrayView.DoubleValues)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NDArrayView_DoubleValues::IsInitialized() const {

  return true;
}

void NDArrayView_DoubleValues::Swap(NDArrayView_DoubleValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NDArrayView_DoubleValues::InternalSwap(NDArrayView_DoubleValues* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NDArrayView_DoubleValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NDArrayView_DoubleValues_descriptor_;
  metadata.reflection = NDArrayView_DoubleValues_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NDArrayView::kDataTypeFieldNumber;
const int NDArrayView::kStorageFormatFieldNumber;
const int NDArrayView::kShapeFieldNumber;
const int NDArrayView::kFloatValuesFieldNumber;
const int NDArrayView::kDoubleValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NDArrayView::NDArrayView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CNTK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNTK.proto.NDArrayView)
}

void NDArrayView::InitAsDefaultInstance() {
  shape_ = const_cast< ::CNTK::proto::NDShape*>(
      ::CNTK::proto::NDShape::internal_default_instance());
  NDArrayView_default_oneof_instance_->float_values_ = const_cast< ::CNTK::proto::NDArrayView_FloatValues*>(
      ::CNTK::proto::NDArrayView_FloatValues::internal_default_instance());
  NDArrayView_default_oneof_instance_->double_values_ = const_cast< ::CNTK::proto::NDArrayView_DoubleValues*>(
      ::CNTK::proto::NDArrayView_DoubleValues::internal_default_instance());
}

NDArrayView::NDArrayView(const NDArrayView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDArrayView)
}

void NDArrayView::SharedCtor() {
  shape_ = NULL;
  ::memset(&data_type_, 0, reinterpret_cast<char*>(&storage_format_) -
    reinterpret_cast<char*>(&data_type_) + sizeof(storage_format_));
  clear_has_values();
  _cached_size_ = 0;
}

NDArrayView::~NDArrayView() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDArrayView)
  SharedDtor();
}

void NDArrayView::SharedDtor() {
  if (has_values()) {
    clear_values();
  }
  if (this != &NDArrayView_default_instance_.get()) {
    delete shape_;
  }
}

void NDArrayView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NDArrayView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NDArrayView_descriptor_;
}

const NDArrayView& NDArrayView::default_instance() {
  protobuf_InitDefaults_CNTK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NDArrayView> NDArrayView_default_instance_;

NDArrayView* NDArrayView::New(::google::protobuf::Arena* arena) const {
  NDArrayView* n = new NDArrayView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NDArrayView::clear_values() {
// @@protoc_insertion_point(one_of_clear_start:CNTK.proto.NDArrayView)
  switch (values_case()) {
    case kFloatValues: {
      delete values_.float_values_;
      break;
    }
    case kDoubleValues: {
      delete values_.double_values_;
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUES_NOT_SET;
}


void NDArrayView::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDArrayView)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NDArrayView, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NDArrayView*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(data_type_, storage_format_);
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  clear_values();
}

bool NDArrayView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNTK.proto.NDArrayView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CNTK.proto.NDArrayView.DataType data_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::CNTK::proto::NDArrayView_DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_storage_format;
        break;
      }

      // optional .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
      case 2: {
        if (tag == 16) {
         parse_storage_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_storage_format(static_cast< ::CNTK::proto::NDArrayView_StorageFormat >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shape;
        break;
      }

      // optional .CNTK.proto.NDShape shape = 3;
      case 3: {
        if (tag == 26) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_float_values;
        break;
      }

      // optional .CNTK.proto.NDArrayView.FloatValues float_values = 4;
      case 4: {
        if (tag == 34) {
         parse_float_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_values()));
        } else {
          goto handle_unusual;
        }
        goto after_double_values;
        break;
      }

      // optional .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_double_values()));
        } else {
          goto handle_unusual;
        }
       after_double_values:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNTK.proto.NDArrayView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNTK.proto.NDArrayView)
  return false;
#undef DO_
}

void NDArrayView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNTK.proto.NDArrayView)
  // optional .CNTK.proto.NDArrayView.DataType data_type = 1;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data_type(), output);
  }

  // optional .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
  if (this->storage_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->storage_format(), output);
  }

  // optional .CNTK.proto.NDShape shape = 3;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shape_, output);
  }

  // optional .CNTK.proto.NDArrayView.FloatValues float_values = 4;
  if (has_float_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *values_.float_values_, output);
  }

  // optional .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
  if (has_double_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *values_.double_values_, output);
  }

  // @@protoc_insertion_point(serialize_end:CNTK.proto.NDArrayView)
}

::google::protobuf::uint8* NDArrayView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDArrayView)
  // optional .CNTK.proto.NDArrayView.DataType data_type = 1;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data_type(), target);
  }

  // optional .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
  if (this->storage_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->storage_format(), target);
  }

  // optional .CNTK.proto.NDShape shape = 3;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shape_, false, target);
  }

  // optional .CNTK.proto.NDArrayView.FloatValues float_values = 4;
  if (has_float_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *values_.float_values_, false, target);
  }

  // optional .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
  if (has_double_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *values_.double_values_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDArrayView)
  return target;
}

size_t NDArrayView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDArrayView)
  size_t total_size = 0;

  // optional .CNTK.proto.NDArrayView.DataType data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // optional .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
  if (this->storage_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->storage_format());
  }

  // optional .CNTK.proto.NDShape shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  switch (values_case()) {
    // optional .CNTK.proto.NDArrayView.FloatValues float_values = 4;
    case kFloatValues: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *values_.float_values_);
      break;
    }
    // optional .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
    case kDoubleValues: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *values_.double_values_);
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NDArrayView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDArrayView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NDArrayView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NDArrayView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDArrayView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDArrayView)
    UnsafeMergeFrom(*source);
  }
}

void NDArrayView::MergeFrom(const NDArrayView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDArrayView)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NDArrayView::UnsafeMergeFrom(const NDArrayView& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.values_case()) {
    case kFloatValues: {
      mutable_float_values()->::CNTK::proto::NDArrayView_FloatValues::MergeFrom(from.float_values());
      break;
    }
    case kDoubleValues: {
      mutable_double_values()->::CNTK::proto::NDArrayView_DoubleValues::MergeFrom(from.double_values());
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.storage_format() != 0) {
    set_storage_format(from.storage_format());
  }
  if (from.has_shape()) {
    mutable_shape()->::CNTK::proto::NDShape::MergeFrom(from.shape());
  }
}

void NDArrayView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDArrayView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayView::CopyFrom(const NDArrayView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDArrayView)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NDArrayView::IsInitialized() const {

  return true;
}

void NDArrayView::Swap(NDArrayView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NDArrayView::InternalSwap(NDArrayView* other) {
  std::swap(data_type_, other->data_type_);
  std::swap(storage_format_, other->storage_format_);
  std::swap(shape_, other->shape_);
  std::swap(values_, other->values_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NDArrayView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NDArrayView_descriptor_;
  metadata.reflection = NDArrayView_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NDArrayView_FloatValues

// repeated float value = 1 [packed = true];
int NDArrayView_FloatValues::value_size() const {
  return value_.size();
}
void NDArrayView_FloatValues::clear_value() {
  value_.Clear();
}
float NDArrayView_FloatValues::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.FloatValues.value)
  return value_.Get(index);
}
void NDArrayView_FloatValues::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.FloatValues.value)
}
void NDArrayView_FloatValues::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDArrayView.FloatValues.value)
}
const ::google::protobuf::RepeatedField< float >&
NDArrayView_FloatValues::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDArrayView.FloatValues.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
NDArrayView_FloatValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDArrayView.FloatValues.value)
  return &value_;
}

inline const NDArrayView_FloatValues* NDArrayView_FloatValues::internal_default_instance() {
  return &NDArrayView_FloatValues_default_instance_.get();
}
// -------------------------------------------------------------------

// NDArrayView_DoubleValues

// repeated double value = 1 [packed = true];
int NDArrayView_DoubleValues::value_size() const {
  return value_.size();
}
void NDArrayView_DoubleValues::clear_value() {
  value_.Clear();
}
double NDArrayView_DoubleValues::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.DoubleValues.value)
  return value_.Get(index);
}
void NDArrayView_DoubleValues::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.DoubleValues.value)
}
void NDArrayView_DoubleValues::add_value(double value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDArrayView.DoubleValues.value)
}
const ::google::protobuf::RepeatedField< double >&
NDArrayView_DoubleValues::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDArrayView.DoubleValues.value)
  return value_;
}
::google::protobuf::RepeatedField< double >*
NDArrayView_DoubleValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDArrayView.DoubleValues.value)
  return &value_;
}

inline const NDArrayView_DoubleValues* NDArrayView_DoubleValues::internal_default_instance() {
  return &NDArrayView_DoubleValues_default_instance_.get();
}
// -------------------------------------------------------------------

// NDArrayView

// optional .CNTK.proto.NDArrayView.DataType data_type = 1;
void NDArrayView::clear_data_type() {
  data_type_ = 0;
}
::CNTK::proto::NDArrayView_DataType NDArrayView::data_type() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.data_type)
  return static_cast< ::CNTK::proto::NDArrayView_DataType >(data_type_);
}
void NDArrayView::set_data_type(::CNTK::proto::NDArrayView_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.data_type)
}

// optional .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
void NDArrayView::clear_storage_format() {
  storage_format_ = 0;
}
::CNTK::proto::NDArrayView_StorageFormat NDArrayView::storage_format() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.storage_format)
  return static_cast< ::CNTK::proto::NDArrayView_StorageFormat >(storage_format_);
}
void NDArrayView::set_storage_format(::CNTK::proto::NDArrayView_StorageFormat value) {
  
  storage_format_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.storage_format)
}

// optional .CNTK.proto.NDShape shape = 3;
bool NDArrayView::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void NDArrayView::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::CNTK::proto::NDShape& NDArrayView::shape() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.shape)
  return shape_ != NULL ? *shape_
                         : *::CNTK::proto::NDShape::internal_default_instance();
}
::CNTK::proto::NDShape* NDArrayView::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::CNTK::proto::NDShape;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.shape)
  return shape_;
}
::CNTK::proto::NDShape* NDArrayView::release_shape() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.shape)
  
  ::CNTK::proto::NDShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void NDArrayView::set_allocated_shape(::CNTK::proto::NDShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.shape)
}

// optional .CNTK.proto.NDArrayView.FloatValues float_values = 4;
bool NDArrayView::has_float_values() const {
  return values_case() == kFloatValues;
}
void NDArrayView::set_has_float_values() {
  _oneof_case_[0] = kFloatValues;
}
void NDArrayView::clear_float_values() {
  if (has_float_values()) {
    delete values_.float_values_;
    clear_has_values();
  }
}
 const ::CNTK::proto::NDArrayView_FloatValues& NDArrayView::float_values() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.float_values)
  return has_float_values()
      ? *values_.float_values_
      : ::CNTK::proto::NDArrayView_FloatValues::default_instance();
}
::CNTK::proto::NDArrayView_FloatValues* NDArrayView::mutable_float_values() {
  if (!has_float_values()) {
    clear_values();
    set_has_float_values();
    values_.float_values_ = new ::CNTK::proto::NDArrayView_FloatValues;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.float_values)
  return values_.float_values_;
}
::CNTK::proto::NDArrayView_FloatValues* NDArrayView::release_float_values() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.float_values)
  if (has_float_values()) {
    clear_has_values();
    ::CNTK::proto::NDArrayView_FloatValues* temp = values_.float_values_;
    values_.float_values_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NDArrayView::set_allocated_float_values(::CNTK::proto::NDArrayView_FloatValues* float_values) {
  clear_values();
  if (float_values) {
    set_has_float_values();
    values_.float_values_ = float_values;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.float_values)
}

// optional .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
bool NDArrayView::has_double_values() const {
  return values_case() == kDoubleValues;
}
void NDArrayView::set_has_double_values() {
  _oneof_case_[0] = kDoubleValues;
}
void NDArrayView::clear_double_values() {
  if (has_double_values()) {
    delete values_.double_values_;
    clear_has_values();
  }
}
 const ::CNTK::proto::NDArrayView_DoubleValues& NDArrayView::double_values() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.double_values)
  return has_double_values()
      ? *values_.double_values_
      : ::CNTK::proto::NDArrayView_DoubleValues::default_instance();
}
::CNTK::proto::NDArrayView_DoubleValues* NDArrayView::mutable_double_values() {
  if (!has_double_values()) {
    clear_values();
    set_has_double_values();
    values_.double_values_ = new ::CNTK::proto::NDArrayView_DoubleValues;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.double_values)
  return values_.double_values_;
}
::CNTK::proto::NDArrayView_DoubleValues* NDArrayView::release_double_values() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.double_values)
  if (has_double_values()) {
    clear_has_values();
    ::CNTK::proto::NDArrayView_DoubleValues* temp = values_.double_values_;
    values_.double_values_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NDArrayView::set_allocated_double_values(::CNTK::proto::NDArrayView_DoubleValues* double_values) {
  clear_values();
  if (double_values) {
    set_has_double_values();
    values_.double_values_ = double_values;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.double_values)
}

bool NDArrayView::has_values() const {
  return values_case() != VALUES_NOT_SET;
}
void NDArrayView::clear_has_values() {
  _oneof_case_[0] = VALUES_NOT_SET;
}
NDArrayView::ValuesCase NDArrayView::values_case() const {
  return NDArrayView::ValuesCase(_oneof_case_[0]);
}
inline const NDArrayView* NDArrayView::internal_default_instance() {
  return &NDArrayView_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CNTK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNTK.proto.Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:CNTK.proto.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_descriptor_;
}

const Vector& Vector::default_instance() {
  protobuf_InitDefaults_CNTK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector> Vector_default_instance_;

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  Vector* n = new Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.Vector)
  value_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNTK.proto.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CNTK.proto.DictionaryValue value = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_value;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNTK.proto.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNTK.proto.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNTK.proto.Vector)
  // repeated .CNTK.proto.DictionaryValue value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CNTK.proto.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.Vector)
  // repeated .CNTK.proto.DictionaryValue value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->value(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.Vector)
  size_t total_size = 0;

  // repeated .CNTK.proto.DictionaryValue value = 1;
  {
    unsigned int count = this->value_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.Vector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.Vector)
    UnsafeMergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.Vector)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector::UnsafeMergeFrom(const Vector& from) {
  GOOGLE_DCHECK(&from != this);
  value_.MergeFrom(from.value_);
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.Vector)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector::IsInitialized() const {

  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_descriptor_;
  metadata.reflection = Vector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector

// repeated .CNTK.proto.DictionaryValue value = 1;
int Vector::value_size() const {
  return value_.size();
}
void Vector::clear_value() {
  value_.Clear();
}
const ::CNTK::proto::DictionaryValue& Vector::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Vector.value)
  return value_.Get(index);
}
::CNTK::proto::DictionaryValue* Vector::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.Vector.value)
  return value_.Mutable(index);
}
::CNTK::proto::DictionaryValue* Vector::add_value() {
  // @@protoc_insertion_point(field_add:CNTK.proto.Vector.value)
  return value_.Add();
}
::google::protobuf::RepeatedPtrField< ::CNTK::proto::DictionaryValue >*
Vector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.Vector.value)
  return &value_;
}
const ::google::protobuf::RepeatedPtrField< ::CNTK::proto::DictionaryValue >&
Vector::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.Vector.value)
  return value_;
}

inline const Vector* Vector::internal_default_instance() {
  return &Vector_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dictionary::kVersionFieldNumber;
const int Dictionary::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dictionary::Dictionary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CNTK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNTK.proto.Dictionary)
}

void Dictionary::InitAsDefaultInstance() {
}

Dictionary::Dictionary(const Dictionary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.Dictionary)
}

void Dictionary::SharedCtor() {
  data_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  data_.SetEntryDescriptor(
      &::CNTK::proto::Dictionary_DataEntry_descriptor_);
  version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Dictionary::~Dictionary() {
  // @@protoc_insertion_point(destructor:CNTK.proto.Dictionary)
  SharedDtor();
}

void Dictionary::SharedDtor() {
}

void Dictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dictionary_descriptor_;
}

const Dictionary& Dictionary::default_instance() {
  protobuf_InitDefaults_CNTK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Dictionary> Dictionary_default_instance_;

Dictionary* Dictionary::New(::google::protobuf::Arena* arena) const {
  Dictionary* n = new Dictionary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.Dictionary)
  version_ = GOOGLE_ULONGLONG(0);
  data_.Clear();
}

bool Dictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNTK.proto.Dictionary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // map<string, .CNTK.proto.DictionaryValue> data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          Dictionary_DataEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::CNTK::proto::DictionaryValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue > > parser(&data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CNTK.proto.Dictionary.DataEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNTK.proto.Dictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNTK.proto.Dictionary)
  return false;
#undef DO_
}

void Dictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNTK.proto.Dictionary)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // map<string, .CNTK.proto.DictionaryValue> data = 2;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CNTK.proto.Dictionary.DataEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->data().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Dictionary_DataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Dictionary_DataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:CNTK.proto.Dictionary)
}

::google::protobuf::uint8* Dictionary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.Dictionary)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // map<string, .CNTK.proto.DictionaryValue> data = 2;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CNTK.proto.Dictionary.DataEntry.key");
      }
    };

    if (deterministic &&
        this->data().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Dictionary_DataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Dictionary_DataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.Dictionary)
  return target;
}

size_t Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.Dictionary)
  size_t total_size = 0;

  // optional uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // map<string, .CNTK.proto.DictionaryValue> data = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  {
    ::google::protobuf::scoped_ptr<Dictionary_DataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >::const_iterator
        it = this->data().begin();
        it != this->data().end(); ++it) {
      entry.reset(data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dictionary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.Dictionary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Dictionary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dictionary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.Dictionary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.Dictionary)
    UnsafeMergeFrom(*source);
  }
}

void Dictionary::MergeFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.Dictionary)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Dictionary::UnsafeMergeFrom(const Dictionary& from) {
  GOOGLE_DCHECK(&from != this);
  data_.MergeFrom(from.data_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Dictionary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dictionary::CopyFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.Dictionary)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Dictionary::IsInitialized() const {

  return true;
}

void Dictionary::Swap(Dictionary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dictionary::InternalSwap(Dictionary* other) {
  std::swap(version_, other->version_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dictionary_descriptor_;
  metadata.reflection = Dictionary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dictionary

// optional uint64 version = 1;
void Dictionary::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Dictionary::version() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Dictionary.version)
  return version_;
}
void Dictionary::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.Dictionary.version)
}

// map<string, .CNTK.proto.DictionaryValue> data = 2;
int Dictionary::data_size() const {
  return data_.size();
}
void Dictionary::clear_data() {
  data_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >&
Dictionary::data() const {
  // @@protoc_insertion_point(field_map:CNTK.proto.Dictionary.data)
  return data_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >*
Dictionary::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:CNTK.proto.Dictionary.data)
  return data_.MutableMap();
}

inline const Dictionary* Dictionary::internal_default_instance() {
  return &Dictionary_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DictionaryValue_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryValue_Type_descriptor_;
}
bool DictionaryValue_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DictionaryValue_Type DictionaryValue::None;
const DictionaryValue_Type DictionaryValue::Bool;
const DictionaryValue_Type DictionaryValue::Int;
const DictionaryValue_Type DictionaryValue::SizeT;
const DictionaryValue_Type DictionaryValue::Float;
const DictionaryValue_Type DictionaryValue::Double;
const DictionaryValue_Type DictionaryValue::String;
const DictionaryValue_Type DictionaryValue::NDShape;
const DictionaryValue_Type DictionaryValue::Axis;
const DictionaryValue_Type DictionaryValue::Vector;
const DictionaryValue_Type DictionaryValue::Dictionary;
const DictionaryValue_Type DictionaryValue::NDArrayView;
const DictionaryValue_Type DictionaryValue::Type_MIN;
const DictionaryValue_Type DictionaryValue::Type_MAX;
const int DictionaryValue::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictionaryValue::kVersionFieldNumber;
const int DictionaryValue::kValueTypeFieldNumber;
const int DictionaryValue::kBoolValueFieldNumber;
const int DictionaryValue::kIntValueFieldNumber;
const int DictionaryValue::kSizeTValueFieldNumber;
const int DictionaryValue::kFloatValueFieldNumber;
const int DictionaryValue::kDoubleValueFieldNumber;
const int DictionaryValue::kStringValueFieldNumber;
const int DictionaryValue::kNdShapeValueFieldNumber;
const int DictionaryValue::kAxisValueFieldNumber;
const int DictionaryValue::kVectorValueFieldNumber;
const int DictionaryValue::kDictionaryValueFieldNumber;
const int DictionaryValue::kNdArrayViewValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictionaryValue::DictionaryValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CNTK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNTK.proto.DictionaryValue)
}

void DictionaryValue::InitAsDefaultInstance() {
  DictionaryValue_default_oneof_instance_->bool_value_ = false;
  DictionaryValue_default_oneof_instance_->int_value_ = 0;
  DictionaryValue_default_oneof_instance_->size_t_value_ = GOOGLE_ULONGLONG(0);
  DictionaryValue_default_oneof_instance_->float_value_ = 0;
  DictionaryValue_default_oneof_instance_->double_value_ = 0;
  DictionaryValue_default_oneof_instance_->string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  DictionaryValue_default_oneof_instance_->nd_shape_value_ = const_cast< ::CNTK::proto::NDShape*>(
      ::CNTK::proto::NDShape::internal_default_instance());
  DictionaryValue_default_oneof_instance_->axis_value_ = const_cast< ::CNTK::proto::Axis*>(
      ::CNTK::proto::Axis::internal_default_instance());
  DictionaryValue_default_oneof_instance_->vector_value_ = const_cast< ::CNTK::proto::Vector*>(
      ::CNTK::proto::Vector::internal_default_instance());
  DictionaryValue_default_oneof_instance_->dictionary_value_ = const_cast< ::CNTK::proto::Dictionary*>(
      ::CNTK::proto::Dictionary::internal_default_instance());
  DictionaryValue_default_oneof_instance_->nd_array_view_value_ = const_cast< ::CNTK::proto::NDArrayView*>(
      ::CNTK::proto::NDArrayView::internal_default_instance());
}

DictionaryValue::DictionaryValue(const DictionaryValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.DictionaryValue)
}

void DictionaryValue::SharedCtor() {
  ::memset(&version_, 0, reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&version_) + sizeof(value_type_));
  clear_has_value();
  _cached_size_ = 0;
}

DictionaryValue::~DictionaryValue() {
  // @@protoc_insertion_point(destructor:CNTK.proto.DictionaryValue)
  SharedDtor();
}

void DictionaryValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void DictionaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictionaryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryValue_descriptor_;
}

const DictionaryValue& DictionaryValue::default_instance() {
  protobuf_InitDefaults_CNTK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DictionaryValue> DictionaryValue_default_instance_;

DictionaryValue* DictionaryValue::New(::google::protobuf::Arena* arena) const {
  DictionaryValue* n = new DictionaryValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictionaryValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:CNTK.proto.DictionaryValue)
  switch (value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kSizeTValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kNdShapeValue: {
      delete value_.nd_shape_value_;
      break;
    }
    case kAxisValue: {
      delete value_.axis_value_;
      break;
    }
    case kVectorValue: {
      delete value_.vector_value_;
      break;
    }
    case kDictionaryValue: {
      delete value_.dictionary_value_;
      break;
    }
    case kNdArrayViewValue: {
      delete value_.nd_array_view_value_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void DictionaryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.DictionaryValue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DictionaryValue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DictionaryValue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, value_type_);

#undef ZR_HELPER_
#undef ZR_

  clear_value();
}

bool DictionaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNTK.proto.DictionaryValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value_type;
        break;
      }

      // optional .CNTK.proto.DictionaryValue.Type value_type = 2;
      case 2: {
        if (tag == 16) {
         parse_value_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_type(static_cast< ::CNTK::proto::DictionaryValue_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bool_value;
        break;
      }

      // optional bool bool_value = 3;
      case 3: {
        if (tag == 24) {
         parse_bool_value:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional int32 int_value = 4;
      case 4: {
        if (tag == 32) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional uint64 size_t_value = 5;
      case 5: {
        if (tag == 40) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_.size_t_value_)));
          set_has_size_t_value();
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional float float_value = 6;
      case 6: {
        if (tag == 53) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional double double_value = 7;
      case 7: {
        if (tag == 57) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional string string_value = 8;
      case 8: {
        if (tag == 66) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CNTK.proto.DictionaryValue.string_value"));
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional .CNTK.proto.NDShape nd_shape_value = 9;
      case 9: {
        if (tag == 74) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nd_shape_value()));
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional .CNTK.proto.Axis axis_value = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis_value()));
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional .CNTK.proto.Vector vector_value = 11;
      case 11: {
        if (tag == 90) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector_value()));
        } else {
          goto handle_unusual;
        }
        goto after_nd_array_view_value;
        break;
      }

      // optional .CNTK.proto.Dictionary dictionary_value = 12;
      case 12: {
        if (tag == 98) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionary_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_nd_array_view_value;
        break;
      }

      // optional .CNTK.proto.NDArrayView nd_array_view_value = 13;
      case 13: {
        if (tag == 106) {
         parse_nd_array_view_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nd_array_view_value()));
        } else {
          goto handle_unusual;
        }
       after_nd_array_view_value:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNTK.proto.DictionaryValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNTK.proto.DictionaryValue)
  return false;
#undef DO_
}

void DictionaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNTK.proto.DictionaryValue)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // optional .CNTK.proto.DictionaryValue.Type value_type = 2;
  if (this->value_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value_type(), output);
  }

  // optional bool bool_value = 3;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bool_value(), output);
  }

  // optional int32 int_value = 4;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->int_value(), output);
  }

  // optional uint64 size_t_value = 5;
  if (has_size_t_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->size_t_value(), output);
  }

  // optional float float_value = 6;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->float_value(), output);
  }

  // optional double double_value = 7;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->double_value(), output);
  }

  // optional string string_value = 8;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CNTK.proto.DictionaryValue.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->string_value(), output);
  }

  // optional .CNTK.proto.NDShape nd_shape_value = 9;
  if (has_nd_shape_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.nd_shape_value_, output);
  }

  // optional .CNTK.proto.Axis axis_value = 10;
  if (has_axis_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.axis_value_, output);
  }

  // optional .CNTK.proto.Vector vector_value = 11;
  if (has_vector_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.vector_value_, output);
  }

  // optional .CNTK.proto.Dictionary dictionary_value = 12;
  if (has_dictionary_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.dictionary_value_, output);
  }

  // optional .CNTK.proto.NDArrayView nd_array_view_value = 13;
  if (has_nd_array_view_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *value_.nd_array_view_value_, output);
  }

  // @@protoc_insertion_point(serialize_end:CNTK.proto.DictionaryValue)
}

::google::protobuf::uint8* DictionaryValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.DictionaryValue)
  // optional uint64 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // optional .CNTK.proto.DictionaryValue.Type value_type = 2;
  if (this->value_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value_type(), target);
  }

  // optional bool bool_value = 3;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bool_value(), target);
  }

  // optional int32 int_value = 4;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->int_value(), target);
  }

  // optional uint64 size_t_value = 5;
  if (has_size_t_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->size_t_value(), target);
  }

  // optional float float_value = 6;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->float_value(), target);
  }

  // optional double double_value = 7;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->double_value(), target);
  }

  // optional string string_value = 8;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CNTK.proto.DictionaryValue.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->string_value(), target);
  }

  // optional .CNTK.proto.NDShape nd_shape_value = 9;
  if (has_nd_shape_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *value_.nd_shape_value_, false, target);
  }

  // optional .CNTK.proto.Axis axis_value = 10;
  if (has_axis_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *value_.axis_value_, false, target);
  }

  // optional .CNTK.proto.Vector vector_value = 11;
  if (has_vector_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *value_.vector_value_, false, target);
  }

  // optional .CNTK.proto.Dictionary dictionary_value = 12;
  if (has_dictionary_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *value_.dictionary_value_, false, target);
  }

  // optional .CNTK.proto.NDArrayView nd_array_view_value = 13;
  if (has_nd_array_view_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *value_.nd_array_view_value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.DictionaryValue)
  return target;
}

size_t DictionaryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.DictionaryValue)
  size_t total_size = 0;

  // optional uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // optional .CNTK.proto.DictionaryValue.Type value_type = 2;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
  }

  switch (value_case()) {
    // optional bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // optional int32 int_value = 4;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
      break;
    }
    // optional uint64 size_t_value = 5;
    case kSizeTValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size_t_value());
      break;
    }
    // optional float float_value = 6;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // optional double double_value = 7;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // optional string string_value = 8;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // optional .CNTK.proto.NDShape nd_shape_value = 9;
    case kNdShapeValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.nd_shape_value_);
      break;
    }
    // optional .CNTK.proto.Axis axis_value = 10;
    case kAxisValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.axis_value_);
      break;
    }
    // optional .CNTK.proto.Vector vector_value = 11;
    case kVectorValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.vector_value_);
      break;
    }
    // optional .CNTK.proto.Dictionary dictionary_value = 12;
    case kDictionaryValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.dictionary_value_);
      break;
    }
    // optional .CNTK.proto.NDArrayView nd_array_view_value = 13;
    case kNdArrayViewValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.nd_array_view_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.DictionaryValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DictionaryValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DictionaryValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.DictionaryValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.DictionaryValue)
    UnsafeMergeFrom(*source);
  }
}

void DictionaryValue::MergeFrom(const DictionaryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.DictionaryValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DictionaryValue::UnsafeMergeFrom(const DictionaryValue& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.value_case()) {
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kSizeTValue: {
      set_size_t_value(from.size_t_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kNdShapeValue: {
      mutable_nd_shape_value()->::CNTK::proto::NDShape::MergeFrom(from.nd_shape_value());
      break;
    }
    case kAxisValue: {
      mutable_axis_value()->::CNTK::proto::Axis::MergeFrom(from.axis_value());
      break;
    }
    case kVectorValue: {
      mutable_vector_value()->::CNTK::proto::Vector::MergeFrom(from.vector_value());
      break;
    }
    case kDictionaryValue: {
      mutable_dictionary_value()->::CNTK::proto::Dictionary::MergeFrom(from.dictionary_value());
      break;
    }
    case kNdArrayViewValue: {
      mutable_nd_array_view_value()->::CNTK::proto::NDArrayView::MergeFrom(from.nd_array_view_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.value_type() != 0) {
    set_value_type(from.value_type());
  }
}

void DictionaryValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.DictionaryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryValue::CopyFrom(const DictionaryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.DictionaryValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DictionaryValue::IsInitialized() const {

  return true;
}

void DictionaryValue::Swap(DictionaryValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictionaryValue::InternalSwap(DictionaryValue* other) {
  std::swap(version_, other->version_);
  std::swap(value_type_, other->value_type_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DictionaryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictionaryValue_descriptor_;
  metadata.reflection = DictionaryValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictionaryValue

// optional uint64 version = 1;
void DictionaryValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DictionaryValue::version() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.version)
  return version_;
}
void DictionaryValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.version)
}

// optional .CNTK.proto.DictionaryValue.Type value_type = 2;
void DictionaryValue::clear_value_type() {
  value_type_ = 0;
}
::CNTK::proto::DictionaryValue_Type DictionaryValue::value_type() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.value_type)
  return static_cast< ::CNTK::proto::DictionaryValue_Type >(value_type_);
}
void DictionaryValue::set_value_type(::CNTK::proto::DictionaryValue_Type value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.value_type)
}

// optional bool bool_value = 3;
bool DictionaryValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
void DictionaryValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
void DictionaryValue::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
bool DictionaryValue::bool_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
void DictionaryValue::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.bool_value)
}

// optional int32 int_value = 4;
bool DictionaryValue::has_int_value() const {
  return value_case() == kIntValue;
}
void DictionaryValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
void DictionaryValue::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = 0;
    clear_has_value();
  }
}
::google::protobuf::int32 DictionaryValue::int_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return 0;
}
void DictionaryValue::set_int_value(::google::protobuf::int32 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.int_value)
}

// optional uint64 size_t_value = 5;
bool DictionaryValue::has_size_t_value() const {
  return value_case() == kSizeTValue;
}
void DictionaryValue::set_has_size_t_value() {
  _oneof_case_[0] = kSizeTValue;
}
void DictionaryValue::clear_size_t_value() {
  if (has_size_t_value()) {
    value_.size_t_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::uint64 DictionaryValue::size_t_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.size_t_value)
  if (has_size_t_value()) {
    return value_.size_t_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
void DictionaryValue::set_size_t_value(::google::protobuf::uint64 value) {
  if (!has_size_t_value()) {
    clear_value();
    set_has_size_t_value();
  }
  value_.size_t_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.size_t_value)
}

// optional float float_value = 6;
bool DictionaryValue::has_float_value() const {
  return value_case() == kFloatValue;
}
void DictionaryValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
void DictionaryValue::clear_float_value() {
  if (has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
float DictionaryValue::float_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.float_value)
  if (has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
void DictionaryValue::set_float_value(float value) {
  if (!has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.float_value)
}

// optional double double_value = 7;
bool DictionaryValue::has_double_value() const {
  return value_case() == kDoubleValue;
}
void DictionaryValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
void DictionaryValue::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
double DictionaryValue::double_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
void DictionaryValue::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.double_value)
}

// optional string string_value = 8;
bool DictionaryValue::has_string_value() const {
  return value_case() == kStringValue;
}
void DictionaryValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
void DictionaryValue::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& DictionaryValue::string_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void DictionaryValue::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.string_value)
}
void DictionaryValue::set_string_value(const char* value) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNTK.proto.DictionaryValue.string_value)
}
void DictionaryValue::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNTK.proto.DictionaryValue.string_value)
}
::std::string* DictionaryValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DictionaryValue::release_string_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void DictionaryValue::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.string_value)
}

// optional .CNTK.proto.NDShape nd_shape_value = 9;
bool DictionaryValue::has_nd_shape_value() const {
  return value_case() == kNdShapeValue;
}
void DictionaryValue::set_has_nd_shape_value() {
  _oneof_case_[0] = kNdShapeValue;
}
void DictionaryValue::clear_nd_shape_value() {
  if (has_nd_shape_value()) {
    delete value_.nd_shape_value_;
    clear_has_value();
  }
}
 const ::CNTK::proto::NDShape& DictionaryValue::nd_shape_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.nd_shape_value)
  return has_nd_shape_value()
      ? *value_.nd_shape_value_
      : ::CNTK::proto::NDShape::default_instance();
}
::CNTK::proto::NDShape* DictionaryValue::mutable_nd_shape_value() {
  if (!has_nd_shape_value()) {
    clear_value();
    set_has_nd_shape_value();
    value_.nd_shape_value_ = new ::CNTK::proto::NDShape;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.nd_shape_value)
  return value_.nd_shape_value_;
}
::CNTK::proto::NDShape* DictionaryValue::release_nd_shape_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.nd_shape_value)
  if (has_nd_shape_value()) {
    clear_has_value();
    ::CNTK::proto::NDShape* temp = value_.nd_shape_value_;
    value_.nd_shape_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DictionaryValue::set_allocated_nd_shape_value(::CNTK::proto::NDShape* nd_shape_value) {
  clear_value();
  if (nd_shape_value) {
    set_has_nd_shape_value();
    value_.nd_shape_value_ = nd_shape_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.nd_shape_value)
}

// optional .CNTK.proto.Axis axis_value = 10;
bool DictionaryValue::has_axis_value() const {
  return value_case() == kAxisValue;
}
void DictionaryValue::set_has_axis_value() {
  _oneof_case_[0] = kAxisValue;
}
void DictionaryValue::clear_axis_value() {
  if (has_axis_value()) {
    delete value_.axis_value_;
    clear_has_value();
  }
}
 const ::CNTK::proto::Axis& DictionaryValue::axis_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.axis_value)
  return has_axis_value()
      ? *value_.axis_value_
      : ::CNTK::proto::Axis::default_instance();
}
::CNTK::proto::Axis* DictionaryValue::mutable_axis_value() {
  if (!has_axis_value()) {
    clear_value();
    set_has_axis_value();
    value_.axis_value_ = new ::CNTK::proto::Axis;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.axis_value)
  return value_.axis_value_;
}
::CNTK::proto::Axis* DictionaryValue::release_axis_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.axis_value)
  if (has_axis_value()) {
    clear_has_value();
    ::CNTK::proto::Axis* temp = value_.axis_value_;
    value_.axis_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DictionaryValue::set_allocated_axis_value(::CNTK::proto::Axis* axis_value) {
  clear_value();
  if (axis_value) {
    set_has_axis_value();
    value_.axis_value_ = axis_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.axis_value)
}

// optional .CNTK.proto.Vector vector_value = 11;
bool DictionaryValue::has_vector_value() const {
  return value_case() == kVectorValue;
}
void DictionaryValue::set_has_vector_value() {
  _oneof_case_[0] = kVectorValue;
}
void DictionaryValue::clear_vector_value() {
  if (has_vector_value()) {
    delete value_.vector_value_;
    clear_has_value();
  }
}
 const ::CNTK::proto::Vector& DictionaryValue::vector_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.vector_value)
  return has_vector_value()
      ? *value_.vector_value_
      : ::CNTK::proto::Vector::default_instance();
}
::CNTK::proto::Vector* DictionaryValue::mutable_vector_value() {
  if (!has_vector_value()) {
    clear_value();
    set_has_vector_value();
    value_.vector_value_ = new ::CNTK::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.vector_value)
  return value_.vector_value_;
}
::CNTK::proto::Vector* DictionaryValue::release_vector_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.vector_value)
  if (has_vector_value()) {
    clear_has_value();
    ::CNTK::proto::Vector* temp = value_.vector_value_;
    value_.vector_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DictionaryValue::set_allocated_vector_value(::CNTK::proto::Vector* vector_value) {
  clear_value();
  if (vector_value) {
    set_has_vector_value();
    value_.vector_value_ = vector_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.vector_value)
}

// optional .CNTK.proto.Dictionary dictionary_value = 12;
bool DictionaryValue::has_dictionary_value() const {
  return value_case() == kDictionaryValue;
}
void DictionaryValue::set_has_dictionary_value() {
  _oneof_case_[0] = kDictionaryValue;
}
void DictionaryValue::clear_dictionary_value() {
  if (has_dictionary_value()) {
    delete value_.dictionary_value_;
    clear_has_value();
  }
}
 const ::CNTK::proto::Dictionary& DictionaryValue::dictionary_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.dictionary_value)
  return has_dictionary_value()
      ? *value_.dictionary_value_
      : ::CNTK::proto::Dictionary::default_instance();
}
::CNTK::proto::Dictionary* DictionaryValue::mutable_dictionary_value() {
  if (!has_dictionary_value()) {
    clear_value();
    set_has_dictionary_value();
    value_.dictionary_value_ = new ::CNTK::proto::Dictionary;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.dictionary_value)
  return value_.dictionary_value_;
}
::CNTK::proto::Dictionary* DictionaryValue::release_dictionary_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.dictionary_value)
  if (has_dictionary_value()) {
    clear_has_value();
    ::CNTK::proto::Dictionary* temp = value_.dictionary_value_;
    value_.dictionary_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DictionaryValue::set_allocated_dictionary_value(::CNTK::proto::Dictionary* dictionary_value) {
  clear_value();
  if (dictionary_value) {
    set_has_dictionary_value();
    value_.dictionary_value_ = dictionary_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.dictionary_value)
}

// optional .CNTK.proto.NDArrayView nd_array_view_value = 13;
bool DictionaryValue::has_nd_array_view_value() const {
  return value_case() == kNdArrayViewValue;
}
void DictionaryValue::set_has_nd_array_view_value() {
  _oneof_case_[0] = kNdArrayViewValue;
}
void DictionaryValue::clear_nd_array_view_value() {
  if (has_nd_array_view_value()) {
    delete value_.nd_array_view_value_;
    clear_has_value();
  }
}
 const ::CNTK::proto::NDArrayView& DictionaryValue::nd_array_view_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.nd_array_view_value)
  return has_nd_array_view_value()
      ? *value_.nd_array_view_value_
      : ::CNTK::proto::NDArrayView::default_instance();
}
::CNTK::proto::NDArrayView* DictionaryValue::mutable_nd_array_view_value() {
  if (!has_nd_array_view_value()) {
    clear_value();
    set_has_nd_array_view_value();
    value_.nd_array_view_value_ = new ::CNTK::proto::NDArrayView;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.nd_array_view_value)
  return value_.nd_array_view_value_;
}
::CNTK::proto::NDArrayView* DictionaryValue::release_nd_array_view_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.nd_array_view_value)
  if (has_nd_array_view_value()) {
    clear_has_value();
    ::CNTK::proto::NDArrayView* temp = value_.nd_array_view_value_;
    value_.nd_array_view_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DictionaryValue::set_allocated_nd_array_view_value(::CNTK::proto::NDArrayView* nd_array_view_value) {
  clear_value();
  if (nd_array_view_value) {
    set_has_nd_array_view_value();
    value_.nd_array_view_value_ = nd_array_view_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.nd_array_view_value)
}

bool DictionaryValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void DictionaryValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
DictionaryValue::ValueCase DictionaryValue::value_case() const {
  return DictionaryValue::ValueCase(_oneof_case_[0]);
}
inline const DictionaryValue* DictionaryValue::internal_default_instance() {
  return &DictionaryValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace CNTK

// @@protoc_insertion_point(global_scope)
