// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CNTK.proto

#ifndef PROTOBUF_CNTK_2eproto__INCLUDED
#define PROTOBUF_CNTK_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CNTK {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CNTK_2eproto();
void protobuf_InitDefaults_CNTK_2eproto();
void protobuf_AssignDesc_CNTK_2eproto();
void protobuf_ShutdownFile_CNTK_2eproto();

class Axis;
class Dictionary;
class DictionaryValue;
class NDArrayView;
class NDArrayView_DoubleValues;
class NDArrayView_FloatValues;
class NDShape;
class Vector;

enum NDArrayView_DataType {
  NDArrayView_DataType_Unknown = 0,
  NDArrayView_DataType_Float = 1,
  NDArrayView_DataType_Double = 2,
  NDArrayView_DataType_NDArrayView_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NDArrayView_DataType_NDArrayView_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NDArrayView_DataType_IsValid(int value);
const NDArrayView_DataType NDArrayView_DataType_DataType_MIN = NDArrayView_DataType_Unknown;
const NDArrayView_DataType NDArrayView_DataType_DataType_MAX = NDArrayView_DataType_Double;
const int NDArrayView_DataType_DataType_ARRAYSIZE = NDArrayView_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NDArrayView_DataType_descriptor();
inline const ::std::string& NDArrayView_DataType_Name(NDArrayView_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NDArrayView_DataType_descriptor(), value);
}
inline bool NDArrayView_DataType_Parse(
    const ::std::string& name, NDArrayView_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NDArrayView_DataType>(
    NDArrayView_DataType_descriptor(), name, value);
}
enum NDArrayView_StorageFormat {
  NDArrayView_StorageFormat_Dense = 0,
  NDArrayView_StorageFormat_SparseCSC = 1,
  NDArrayView_StorageFormat_SparseBlockCol = 2,
  NDArrayView_StorageFormat_NDArrayView_StorageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NDArrayView_StorageFormat_NDArrayView_StorageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NDArrayView_StorageFormat_IsValid(int value);
const NDArrayView_StorageFormat NDArrayView_StorageFormat_StorageFormat_MIN = NDArrayView_StorageFormat_Dense;
const NDArrayView_StorageFormat NDArrayView_StorageFormat_StorageFormat_MAX = NDArrayView_StorageFormat_SparseBlockCol;
const int NDArrayView_StorageFormat_StorageFormat_ARRAYSIZE = NDArrayView_StorageFormat_StorageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* NDArrayView_StorageFormat_descriptor();
inline const ::std::string& NDArrayView_StorageFormat_Name(NDArrayView_StorageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    NDArrayView_StorageFormat_descriptor(), value);
}
inline bool NDArrayView_StorageFormat_Parse(
    const ::std::string& name, NDArrayView_StorageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NDArrayView_StorageFormat>(
    NDArrayView_StorageFormat_descriptor(), name, value);
}
enum DictionaryValue_Type {
  DictionaryValue_Type_None = 0,
  DictionaryValue_Type_Bool = 1,
  DictionaryValue_Type_Int = 2,
  DictionaryValue_Type_SizeT = 3,
  DictionaryValue_Type_Float = 4,
  DictionaryValue_Type_Double = 5,
  DictionaryValue_Type_String = 6,
  DictionaryValue_Type_NDShape = 7,
  DictionaryValue_Type_Axis = 8,
  DictionaryValue_Type_Vector = 9,
  DictionaryValue_Type_Dictionary = 10,
  DictionaryValue_Type_NDArrayView = 11,
  DictionaryValue_Type_DictionaryValue_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DictionaryValue_Type_DictionaryValue_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DictionaryValue_Type_IsValid(int value);
const DictionaryValue_Type DictionaryValue_Type_Type_MIN = DictionaryValue_Type_None;
const DictionaryValue_Type DictionaryValue_Type_Type_MAX = DictionaryValue_Type_NDArrayView;
const int DictionaryValue_Type_Type_ARRAYSIZE = DictionaryValue_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DictionaryValue_Type_descriptor();
inline const ::std::string& DictionaryValue_Type_Name(DictionaryValue_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DictionaryValue_Type_descriptor(), value);
}
inline bool DictionaryValue_Type_Parse(
    const ::std::string& name, DictionaryValue_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DictionaryValue_Type>(
    DictionaryValue_Type_descriptor(), name, value);
}
// ===================================================================

class NDShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDShape) */ {
 public:
  NDShape();
  virtual ~NDShape();

  NDShape(const NDShape& from);

  inline NDShape& operator=(const NDShape& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NDShape& default_instance();

  static const NDShape* internal_default_instance();

  void Swap(NDShape* other);

  // implements Message ----------------------------------------------

  inline NDShape* New() const { return New(NULL); }

  NDShape* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NDShape& from);
  void MergeFrom(const NDShape& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NDShape* other);
  void UnsafeMergeFrom(const NDShape& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 shape_dim = 1 [packed = true];
  int shape_dim_size() const;
  void clear_shape_dim();
  static const int kShapeDimFieldNumber = 1;
  ::google::protobuf::uint64 shape_dim(int index) const;
  void set_shape_dim(int index, ::google::protobuf::uint64 value);
  void add_shape_dim(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      shape_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_shape_dim();

  // @@protoc_insertion_point(class_scope:CNTK.proto.NDShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > shape_dim_;
  mutable int _shape_dim_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_CNTK_2eproto_impl();
  friend void  protobuf_AddDesc_CNTK_2eproto_impl();
  friend void protobuf_AssignDesc_CNTK_2eproto();
  friend void protobuf_ShutdownFile_CNTK_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NDShape> NDShape_default_instance_;

// -------------------------------------------------------------------

class Axis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.Axis) */ {
 public:
  Axis();
  virtual ~Axis();

  Axis(const Axis& from);

  inline Axis& operator=(const Axis& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Axis& default_instance();

  static const Axis* internal_default_instance();

  void Swap(Axis* other);

  // implements Message ----------------------------------------------

  inline Axis* New() const { return New(NULL); }

  Axis* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Axis& from);
  void MergeFrom(const Axis& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Axis* other);
  void UnsafeMergeFrom(const Axis& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 static_axis_idx = 1;
  void clear_static_axis_idx();
  static const int kStaticAxisIdxFieldNumber = 1;
  ::google::protobuf::int32 static_axis_idx() const;
  void set_static_axis_idx(::google::protobuf::int32 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool is_ordered_dynamic_axis = 3;
  void clear_is_ordered_dynamic_axis();
  static const int kIsOrderedDynamicAxisFieldNumber = 3;
  bool is_ordered_dynamic_axis() const;
  void set_is_ordered_dynamic_axis(bool value);

  // @@protoc_insertion_point(class_scope:CNTK.proto.Axis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 static_axis_idx_;
  bool is_ordered_dynamic_axis_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_CNTK_2eproto_impl();
  friend void  protobuf_AddDesc_CNTK_2eproto_impl();
  friend void protobuf_AssignDesc_CNTK_2eproto();
  friend void protobuf_ShutdownFile_CNTK_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Axis> Axis_default_instance_;

// -------------------------------------------------------------------

class NDArrayView_FloatValues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDArrayView.FloatValues) */ {
 public:
  NDArrayView_FloatValues();
  virtual ~NDArrayView_FloatValues();

  NDArrayView_FloatValues(const NDArrayView_FloatValues& from);

  inline NDArrayView_FloatValues& operator=(const NDArrayView_FloatValues& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NDArrayView_FloatValues& default_instance();

  static const NDArrayView_FloatValues* internal_default_instance();

  void Swap(NDArrayView_FloatValues* other);

  // implements Message ----------------------------------------------

  inline NDArrayView_FloatValues* New() const { return New(NULL); }

  NDArrayView_FloatValues* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NDArrayView_FloatValues& from);
  void MergeFrom(const NDArrayView_FloatValues& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NDArrayView_FloatValues* other);
  void UnsafeMergeFrom(const NDArrayView_FloatValues& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 1 [packed = true];
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CNTK.proto.NDArrayView.FloatValues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_CNTK_2eproto_impl();
  friend void  protobuf_AddDesc_CNTK_2eproto_impl();
  friend void protobuf_AssignDesc_CNTK_2eproto();
  friend void protobuf_ShutdownFile_CNTK_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NDArrayView_FloatValues> NDArrayView_FloatValues_default_instance_;

// -------------------------------------------------------------------

class NDArrayView_DoubleValues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDArrayView.DoubleValues) */ {
 public:
  NDArrayView_DoubleValues();
  virtual ~NDArrayView_DoubleValues();

  NDArrayView_DoubleValues(const NDArrayView_DoubleValues& from);

  inline NDArrayView_DoubleValues& operator=(const NDArrayView_DoubleValues& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NDArrayView_DoubleValues& default_instance();

  static const NDArrayView_DoubleValues* internal_default_instance();

  void Swap(NDArrayView_DoubleValues* other);

  // implements Message ----------------------------------------------

  inline NDArrayView_DoubleValues* New() const { return New(NULL); }

  NDArrayView_DoubleValues* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NDArrayView_DoubleValues& from);
  void MergeFrom(const NDArrayView_DoubleValues& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NDArrayView_DoubleValues* other);
  void UnsafeMergeFrom(const NDArrayView_DoubleValues& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 1 [packed = true];
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CNTK.proto.NDArrayView.DoubleValues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > value_;
  mutable int _value_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_CNTK_2eproto_impl();
  friend void  protobuf_AddDesc_CNTK_2eproto_impl();
  friend void protobuf_AssignDesc_CNTK_2eproto();
  friend void protobuf_ShutdownFile_CNTK_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NDArrayView_DoubleValues> NDArrayView_DoubleValues_default_instance_;

// -------------------------------------------------------------------

class NDArrayView : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDArrayView) */ {
 public:
  NDArrayView();
  virtual ~NDArrayView();

  NDArrayView(const NDArrayView& from);

  inline NDArrayView& operator=(const NDArrayView& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NDArrayView& default_instance();

  enum ValuesCase {
    kFloatValues = 4,
    kDoubleValues = 5,
    VALUES_NOT_SET = 0,
  };

  static const NDArrayView* internal_default_instance();

  void Swap(NDArrayView* other);

  // implements Message ----------------------------------------------

  inline NDArrayView* New() const { return New(NULL); }

  NDArrayView* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NDArrayView& from);
  void MergeFrom(const NDArrayView& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NDArrayView* other);
  void UnsafeMergeFrom(const NDArrayView& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NDArrayView_FloatValues FloatValues;
  typedef NDArrayView_DoubleValues DoubleValues;

  typedef NDArrayView_DataType DataType;
  static const DataType Unknown =
    NDArrayView_DataType_Unknown;
  static const DataType Float =
    NDArrayView_DataType_Float;
  static const DataType Double =
    NDArrayView_DataType_Double;
  static inline bool DataType_IsValid(int value) {
    return NDArrayView_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    NDArrayView_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    NDArrayView_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    NDArrayView_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return NDArrayView_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return NDArrayView_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return NDArrayView_DataType_Parse(name, value);
  }

  typedef NDArrayView_StorageFormat StorageFormat;
  static const StorageFormat Dense =
    NDArrayView_StorageFormat_Dense;
  static const StorageFormat SparseCSC =
    NDArrayView_StorageFormat_SparseCSC;
  static const StorageFormat SparseBlockCol =
    NDArrayView_StorageFormat_SparseBlockCol;
  static inline bool StorageFormat_IsValid(int value) {
    return NDArrayView_StorageFormat_IsValid(value);
  }
  static const StorageFormat StorageFormat_MIN =
    NDArrayView_StorageFormat_StorageFormat_MIN;
  static const StorageFormat StorageFormat_MAX =
    NDArrayView_StorageFormat_StorageFormat_MAX;
  static const int StorageFormat_ARRAYSIZE =
    NDArrayView_StorageFormat_StorageFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StorageFormat_descriptor() {
    return NDArrayView_StorageFormat_descriptor();
  }
  static inline const ::std::string& StorageFormat_Name(StorageFormat value) {
    return NDArrayView_StorageFormat_Name(value);
  }
  static inline bool StorageFormat_Parse(const ::std::string& name,
      StorageFormat* value) {
    return NDArrayView_StorageFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CNTK.proto.NDArrayView.DataType data_type = 1;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  ::CNTK::proto::NDArrayView_DataType data_type() const;
  void set_data_type(::CNTK::proto::NDArrayView_DataType value);

  // optional .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
  void clear_storage_format();
  static const int kStorageFormatFieldNumber = 2;
  ::CNTK::proto::NDArrayView_StorageFormat storage_format() const;
  void set_storage_format(::CNTK::proto::NDArrayView_StorageFormat value);

  // optional .CNTK.proto.NDShape shape = 3;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  const ::CNTK::proto::NDShape& shape() const;
  ::CNTK::proto::NDShape* mutable_shape();
  ::CNTK::proto::NDShape* release_shape();
  void set_allocated_shape(::CNTK::proto::NDShape* shape);

  // optional .CNTK.proto.NDArrayView.FloatValues float_values = 4;
  bool has_float_values() const;
  void clear_float_values();
  static const int kFloatValuesFieldNumber = 4;
  const ::CNTK::proto::NDArrayView_FloatValues& float_values() const;
  ::CNTK::proto::NDArrayView_FloatValues* mutable_float_values();
  ::CNTK::proto::NDArrayView_FloatValues* release_float_values();
  void set_allocated_float_values(::CNTK::proto::NDArrayView_FloatValues* float_values);

  // optional .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
  bool has_double_values() const;
  void clear_double_values();
  static const int kDoubleValuesFieldNumber = 5;
  const ::CNTK::proto::NDArrayView_DoubleValues& double_values() const;
  ::CNTK::proto::NDArrayView_DoubleValues* mutable_double_values();
  ::CNTK::proto::NDArrayView_DoubleValues* release_double_values();
  void set_allocated_double_values(::CNTK::proto::NDArrayView_DoubleValues* double_values);

  ValuesCase values_case() const;
  // @@protoc_insertion_point(class_scope:CNTK.proto.NDArrayView)
 private:
  inline void set_has_float_values();
  inline void set_has_double_values();

  inline bool has_values() const;
  void clear_values();
  inline void clear_has_values();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CNTK::proto::NDShape* shape_;
  int data_type_;
  int storage_format_;
  union ValuesUnion {
    ValuesUnion() {}
    ::CNTK::proto::NDArrayView_FloatValues* float_values_;
    ::CNTK::proto::NDArrayView_DoubleValues* double_values_;
  } values_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_CNTK_2eproto_impl();
  friend void  protobuf_AddDesc_CNTK_2eproto_impl();
  friend void protobuf_AssignDesc_CNTK_2eproto();
  friend void protobuf_ShutdownFile_CNTK_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NDArrayView> NDArrayView_default_instance_;

// -------------------------------------------------------------------

class Vector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.Vector) */ {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector& default_instance();

  static const Vector* internal_default_instance();

  void Swap(Vector* other);

  // implements Message ----------------------------------------------

  inline Vector* New() const { return New(NULL); }

  Vector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector* other);
  void UnsafeMergeFrom(const Vector& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CNTK.proto.DictionaryValue value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::CNTK::proto::DictionaryValue& value(int index) const;
  ::CNTK::proto::DictionaryValue* mutable_value(int index);
  ::CNTK::proto::DictionaryValue* add_value();
  ::google::protobuf::RepeatedPtrField< ::CNTK::proto::DictionaryValue >*
      mutable_value();
  const ::google::protobuf::RepeatedPtrField< ::CNTK::proto::DictionaryValue >&
      value() const;

  // @@protoc_insertion_point(class_scope:CNTK.proto.Vector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CNTK::proto::DictionaryValue > value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_CNTK_2eproto_impl();
  friend void  protobuf_AddDesc_CNTK_2eproto_impl();
  friend void protobuf_AssignDesc_CNTK_2eproto();
  friend void protobuf_ShutdownFile_CNTK_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Vector> Vector_default_instance_;

// -------------------------------------------------------------------

class Dictionary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.Dictionary) */ {
 public:
  Dictionary();
  virtual ~Dictionary();

  Dictionary(const Dictionary& from);

  inline Dictionary& operator=(const Dictionary& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dictionary& default_instance();

  static const Dictionary* internal_default_instance();

  void Swap(Dictionary* other);

  // implements Message ----------------------------------------------

  inline Dictionary* New() const { return New(NULL); }

  Dictionary* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dictionary& from);
  void MergeFrom(const Dictionary& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dictionary* other);
  void UnsafeMergeFrom(const Dictionary& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional uint64 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // map<string, .CNTK.proto.DictionaryValue> data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >&
      data() const;
  ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:CNTK.proto.Dictionary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::CNTK::proto::DictionaryValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Dictionary_DataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::CNTK::proto::DictionaryValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > data_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_CNTK_2eproto_impl();
  friend void  protobuf_AddDesc_CNTK_2eproto_impl();
  friend void protobuf_AssignDesc_CNTK_2eproto();
  friend void protobuf_ShutdownFile_CNTK_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Dictionary> Dictionary_default_instance_;

// -------------------------------------------------------------------

class DictionaryValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.DictionaryValue) */ {
 public:
  DictionaryValue();
  virtual ~DictionaryValue();

  DictionaryValue(const DictionaryValue& from);

  inline DictionaryValue& operator=(const DictionaryValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictionaryValue& default_instance();

  enum ValueCase {
    kBoolValue = 3,
    kIntValue = 4,
    kSizeTValue = 5,
    kFloatValue = 6,
    kDoubleValue = 7,
    kStringValue = 8,
    kNdShapeValue = 9,
    kAxisValue = 10,
    kVectorValue = 11,
    kDictionaryValue = 12,
    kNdArrayViewValue = 13,
    VALUE_NOT_SET = 0,
  };

  static const DictionaryValue* internal_default_instance();

  void Swap(DictionaryValue* other);

  // implements Message ----------------------------------------------

  inline DictionaryValue* New() const { return New(NULL); }

  DictionaryValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictionaryValue& from);
  void MergeFrom(const DictionaryValue& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictionaryValue* other);
  void UnsafeMergeFrom(const DictionaryValue& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DictionaryValue_Type Type;
  static const Type None =
    DictionaryValue_Type_None;
  static const Type Bool =
    DictionaryValue_Type_Bool;
  static const Type Int =
    DictionaryValue_Type_Int;
  static const Type SizeT =
    DictionaryValue_Type_SizeT;
  static const Type Float =
    DictionaryValue_Type_Float;
  static const Type Double =
    DictionaryValue_Type_Double;
  static const Type String =
    DictionaryValue_Type_String;
  static const Type NDShape =
    DictionaryValue_Type_NDShape;
  static const Type Axis =
    DictionaryValue_Type_Axis;
  static const Type Vector =
    DictionaryValue_Type_Vector;
  static const Type Dictionary =
    DictionaryValue_Type_Dictionary;
  static const Type NDArrayView =
    DictionaryValue_Type_NDArrayView;
  static inline bool Type_IsValid(int value) {
    return DictionaryValue_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DictionaryValue_Type_Type_MIN;
  static const Type Type_MAX =
    DictionaryValue_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DictionaryValue_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DictionaryValue_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DictionaryValue_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DictionaryValue_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // optional .CNTK.proto.DictionaryValue.Type value_type = 2;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 2;
  ::CNTK::proto::DictionaryValue_Type value_type() const;
  void set_value_type(::CNTK::proto::DictionaryValue_Type value);

  // optional bool bool_value = 3;
  private:
  bool has_bool_value() const;
  public:
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 3;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional int32 int_value = 4;
  private:
  bool has_int_value() const;
  public:
  void clear_int_value();
  static const int kIntValueFieldNumber = 4;
  ::google::protobuf::int32 int_value() const;
  void set_int_value(::google::protobuf::int32 value);

  // optional uint64 size_t_value = 5;
  private:
  bool has_size_t_value() const;
  public:
  void clear_size_t_value();
  static const int kSizeTValueFieldNumber = 5;
  ::google::protobuf::uint64 size_t_value() const;
  void set_size_t_value(::google::protobuf::uint64 value);

  // optional float float_value = 6;
  private:
  bool has_float_value() const;
  public:
  void clear_float_value();
  static const int kFloatValueFieldNumber = 6;
  float float_value() const;
  void set_float_value(float value);

  // optional double double_value = 7;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 7;
  double double_value() const;
  void set_double_value(double value);

  // optional string string_value = 8;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 8;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional .CNTK.proto.NDShape nd_shape_value = 9;
  bool has_nd_shape_value() const;
  void clear_nd_shape_value();
  static const int kNdShapeValueFieldNumber = 9;
  const ::CNTK::proto::NDShape& nd_shape_value() const;
  ::CNTK::proto::NDShape* mutable_nd_shape_value();
  ::CNTK::proto::NDShape* release_nd_shape_value();
  void set_allocated_nd_shape_value(::CNTK::proto::NDShape* nd_shape_value);

  // optional .CNTK.proto.Axis axis_value = 10;
  bool has_axis_value() const;
  void clear_axis_value();
  static const int kAxisValueFieldNumber = 10;
  const ::CNTK::proto::Axis& axis_value() const;
  ::CNTK::proto::Axis* mutable_axis_value();
  ::CNTK::proto::Axis* release_axis_value();
  void set_allocated_axis_value(::CNTK::proto::Axis* axis_value);

  // optional .CNTK.proto.Vector vector_value = 11;
  bool has_vector_value() const;
  void clear_vector_value();
  static const int kVectorValueFieldNumber = 11;
  const ::CNTK::proto::Vector& vector_value() const;
  ::CNTK::proto::Vector* mutable_vector_value();
  ::CNTK::proto::Vector* release_vector_value();
  void set_allocated_vector_value(::CNTK::proto::Vector* vector_value);

  // optional .CNTK.proto.Dictionary dictionary_value = 12;
  bool has_dictionary_value() const;
  void clear_dictionary_value();
  static const int kDictionaryValueFieldNumber = 12;
  const ::CNTK::proto::Dictionary& dictionary_value() const;
  ::CNTK::proto::Dictionary* mutable_dictionary_value();
  ::CNTK::proto::Dictionary* release_dictionary_value();
  void set_allocated_dictionary_value(::CNTK::proto::Dictionary* dictionary_value);

  // optional .CNTK.proto.NDArrayView nd_array_view_value = 13;
  bool has_nd_array_view_value() const;
  void clear_nd_array_view_value();
  static const int kNdArrayViewValueFieldNumber = 13;
  const ::CNTK::proto::NDArrayView& nd_array_view_value() const;
  ::CNTK::proto::NDArrayView* mutable_nd_array_view_value();
  ::CNTK::proto::NDArrayView* release_nd_array_view_value();
  void set_allocated_nd_array_view_value(::CNTK::proto::NDArrayView* nd_array_view_value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:CNTK.proto.DictionaryValue)
 private:
  inline void set_has_bool_value();
  inline void set_has_int_value();
  inline void set_has_size_t_value();
  inline void set_has_float_value();
  inline void set_has_double_value();
  inline void set_has_string_value();
  inline void set_has_nd_shape_value();
  inline void set_has_axis_value();
  inline void set_has_vector_value();
  inline void set_has_dictionary_value();
  inline void set_has_nd_array_view_value();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 version_;
  int value_type_;
  union ValueUnion {
    ValueUnion() {}
    bool bool_value_;
    ::google::protobuf::int32 int_value_;
    ::google::protobuf::uint64 size_t_value_;
    float float_value_;
    double double_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::CNTK::proto::NDShape* nd_shape_value_;
    ::CNTK::proto::Axis* axis_value_;
    ::CNTK::proto::Vector* vector_value_;
    ::CNTK::proto::Dictionary* dictionary_value_;
    ::CNTK::proto::NDArrayView* nd_array_view_value_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_CNTK_2eproto_impl();
  friend void  protobuf_AddDesc_CNTK_2eproto_impl();
  friend void protobuf_AssignDesc_CNTK_2eproto();
  friend void protobuf_ShutdownFile_CNTK_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DictionaryValue> DictionaryValue_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NDShape

// repeated uint64 shape_dim = 1 [packed = true];
inline int NDShape::shape_dim_size() const {
  return shape_dim_.size();
}
inline void NDShape::clear_shape_dim() {
  shape_dim_.Clear();
}
inline ::google::protobuf::uint64 NDShape::shape_dim(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDShape.shape_dim)
  return shape_dim_.Get(index);
}
inline void NDShape::set_shape_dim(int index, ::google::protobuf::uint64 value) {
  shape_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDShape.shape_dim)
}
inline void NDShape::add_shape_dim(::google::protobuf::uint64 value) {
  shape_dim_.Add(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDShape.shape_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NDShape::shape_dim() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDShape.shape_dim)
  return shape_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NDShape::mutable_shape_dim() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDShape.shape_dim)
  return &shape_dim_;
}

inline const NDShape* NDShape::internal_default_instance() {
  return &NDShape_default_instance_.get();
}
// -------------------------------------------------------------------

// Axis

// optional int32 static_axis_idx = 1;
inline void Axis::clear_static_axis_idx() {
  static_axis_idx_ = 0;
}
inline ::google::protobuf::int32 Axis::static_axis_idx() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.static_axis_idx)
  return static_axis_idx_;
}
inline void Axis::set_static_axis_idx(::google::protobuf::int32 value) {
  
  static_axis_idx_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.static_axis_idx)
}

// optional string name = 2;
inline void Axis::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Axis::name() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Axis::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.name)
}
inline void Axis::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNTK.proto.Axis.name)
}
inline void Axis::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNTK.proto.Axis.name)
}
inline ::std::string* Axis::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CNTK.proto.Axis.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Axis::release_name() {
  // @@protoc_insertion_point(field_release:CNTK.proto.Axis.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Axis::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.Axis.name)
}

// optional bool is_ordered_dynamic_axis = 3;
inline void Axis::clear_is_ordered_dynamic_axis() {
  is_ordered_dynamic_axis_ = false;
}
inline bool Axis::is_ordered_dynamic_axis() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.is_ordered_dynamic_axis)
  return is_ordered_dynamic_axis_;
}
inline void Axis::set_is_ordered_dynamic_axis(bool value) {
  
  is_ordered_dynamic_axis_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.is_ordered_dynamic_axis)
}

inline const Axis* Axis::internal_default_instance() {
  return &Axis_default_instance_.get();
}
// -------------------------------------------------------------------

// NDArrayView_FloatValues

// repeated float value = 1 [packed = true];
inline int NDArrayView_FloatValues::value_size() const {
  return value_.size();
}
inline void NDArrayView_FloatValues::clear_value() {
  value_.Clear();
}
inline float NDArrayView_FloatValues::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.FloatValues.value)
  return value_.Get(index);
}
inline void NDArrayView_FloatValues::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.FloatValues.value)
}
inline void NDArrayView_FloatValues::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDArrayView.FloatValues.value)
}
inline const ::google::protobuf::RepeatedField< float >&
NDArrayView_FloatValues::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDArrayView.FloatValues.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
NDArrayView_FloatValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDArrayView.FloatValues.value)
  return &value_;
}

inline const NDArrayView_FloatValues* NDArrayView_FloatValues::internal_default_instance() {
  return &NDArrayView_FloatValues_default_instance_.get();
}
// -------------------------------------------------------------------

// NDArrayView_DoubleValues

// repeated double value = 1 [packed = true];
inline int NDArrayView_DoubleValues::value_size() const {
  return value_.size();
}
inline void NDArrayView_DoubleValues::clear_value() {
  value_.Clear();
}
inline double NDArrayView_DoubleValues::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.DoubleValues.value)
  return value_.Get(index);
}
inline void NDArrayView_DoubleValues::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.DoubleValues.value)
}
inline void NDArrayView_DoubleValues::add_value(double value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDArrayView.DoubleValues.value)
}
inline const ::google::protobuf::RepeatedField< double >&
NDArrayView_DoubleValues::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDArrayView.DoubleValues.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
NDArrayView_DoubleValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDArrayView.DoubleValues.value)
  return &value_;
}

inline const NDArrayView_DoubleValues* NDArrayView_DoubleValues::internal_default_instance() {
  return &NDArrayView_DoubleValues_default_instance_.get();
}
// -------------------------------------------------------------------

// NDArrayView

// optional .CNTK.proto.NDArrayView.DataType data_type = 1;
inline void NDArrayView::clear_data_type() {
  data_type_ = 0;
}
inline ::CNTK::proto::NDArrayView_DataType NDArrayView::data_type() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.data_type)
  return static_cast< ::CNTK::proto::NDArrayView_DataType >(data_type_);
}
inline void NDArrayView::set_data_type(::CNTK::proto::NDArrayView_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.data_type)
}

// optional .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
inline void NDArrayView::clear_storage_format() {
  storage_format_ = 0;
}
inline ::CNTK::proto::NDArrayView_StorageFormat NDArrayView::storage_format() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.storage_format)
  return static_cast< ::CNTK::proto::NDArrayView_StorageFormat >(storage_format_);
}
inline void NDArrayView::set_storage_format(::CNTK::proto::NDArrayView_StorageFormat value) {
  
  storage_format_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.storage_format)
}

// optional .CNTK.proto.NDShape shape = 3;
inline bool NDArrayView::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void NDArrayView::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::CNTK::proto::NDShape& NDArrayView::shape() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.shape)
  return shape_ != NULL ? *shape_
                         : *::CNTK::proto::NDShape::internal_default_instance();
}
inline ::CNTK::proto::NDShape* NDArrayView::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::CNTK::proto::NDShape;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.shape)
  return shape_;
}
inline ::CNTK::proto::NDShape* NDArrayView::release_shape() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.shape)
  
  ::CNTK::proto::NDShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void NDArrayView::set_allocated_shape(::CNTK::proto::NDShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.shape)
}

// optional .CNTK.proto.NDArrayView.FloatValues float_values = 4;
inline bool NDArrayView::has_float_values() const {
  return values_case() == kFloatValues;
}
inline void NDArrayView::set_has_float_values() {
  _oneof_case_[0] = kFloatValues;
}
inline void NDArrayView::clear_float_values() {
  if (has_float_values()) {
    delete values_.float_values_;
    clear_has_values();
  }
}
inline  const ::CNTK::proto::NDArrayView_FloatValues& NDArrayView::float_values() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.float_values)
  return has_float_values()
      ? *values_.float_values_
      : ::CNTK::proto::NDArrayView_FloatValues::default_instance();
}
inline ::CNTK::proto::NDArrayView_FloatValues* NDArrayView::mutable_float_values() {
  if (!has_float_values()) {
    clear_values();
    set_has_float_values();
    values_.float_values_ = new ::CNTK::proto::NDArrayView_FloatValues;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.float_values)
  return values_.float_values_;
}
inline ::CNTK::proto::NDArrayView_FloatValues* NDArrayView::release_float_values() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.float_values)
  if (has_float_values()) {
    clear_has_values();
    ::CNTK::proto::NDArrayView_FloatValues* temp = values_.float_values_;
    values_.float_values_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NDArrayView::set_allocated_float_values(::CNTK::proto::NDArrayView_FloatValues* float_values) {
  clear_values();
  if (float_values) {
    set_has_float_values();
    values_.float_values_ = float_values;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.float_values)
}

// optional .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
inline bool NDArrayView::has_double_values() const {
  return values_case() == kDoubleValues;
}
inline void NDArrayView::set_has_double_values() {
  _oneof_case_[0] = kDoubleValues;
}
inline void NDArrayView::clear_double_values() {
  if (has_double_values()) {
    delete values_.double_values_;
    clear_has_values();
  }
}
inline  const ::CNTK::proto::NDArrayView_DoubleValues& NDArrayView::double_values() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.double_values)
  return has_double_values()
      ? *values_.double_values_
      : ::CNTK::proto::NDArrayView_DoubleValues::default_instance();
}
inline ::CNTK::proto::NDArrayView_DoubleValues* NDArrayView::mutable_double_values() {
  if (!has_double_values()) {
    clear_values();
    set_has_double_values();
    values_.double_values_ = new ::CNTK::proto::NDArrayView_DoubleValues;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.double_values)
  return values_.double_values_;
}
inline ::CNTK::proto::NDArrayView_DoubleValues* NDArrayView::release_double_values() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.double_values)
  if (has_double_values()) {
    clear_has_values();
    ::CNTK::proto::NDArrayView_DoubleValues* temp = values_.double_values_;
    values_.double_values_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void NDArrayView::set_allocated_double_values(::CNTK::proto::NDArrayView_DoubleValues* double_values) {
  clear_values();
  if (double_values) {
    set_has_double_values();
    values_.double_values_ = double_values;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.double_values)
}

inline bool NDArrayView::has_values() const {
  return values_case() != VALUES_NOT_SET;
}
inline void NDArrayView::clear_has_values() {
  _oneof_case_[0] = VALUES_NOT_SET;
}
inline NDArrayView::ValuesCase NDArrayView::values_case() const {
  return NDArrayView::ValuesCase(_oneof_case_[0]);
}
inline const NDArrayView* NDArrayView::internal_default_instance() {
  return &NDArrayView_default_instance_.get();
}
// -------------------------------------------------------------------

// Vector

// repeated .CNTK.proto.DictionaryValue value = 1;
inline int Vector::value_size() const {
  return value_.size();
}
inline void Vector::clear_value() {
  value_.Clear();
}
inline const ::CNTK::proto::DictionaryValue& Vector::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Vector.value)
  return value_.Get(index);
}
inline ::CNTK::proto::DictionaryValue* Vector::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.Vector.value)
  return value_.Mutable(index);
}
inline ::CNTK::proto::DictionaryValue* Vector::add_value() {
  // @@protoc_insertion_point(field_add:CNTK.proto.Vector.value)
  return value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CNTK::proto::DictionaryValue >*
Vector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.Vector.value)
  return &value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CNTK::proto::DictionaryValue >&
Vector::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.Vector.value)
  return value_;
}

inline const Vector* Vector::internal_default_instance() {
  return &Vector_default_instance_.get();
}
// -------------------------------------------------------------------

// Dictionary

// optional uint64 version = 1;
inline void Dictionary::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Dictionary::version() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Dictionary.version)
  return version_;
}
inline void Dictionary::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.Dictionary.version)
}

// map<string, .CNTK.proto.DictionaryValue> data = 2;
inline int Dictionary::data_size() const {
  return data_.size();
}
inline void Dictionary::clear_data() {
  data_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >&
Dictionary::data() const {
  // @@protoc_insertion_point(field_map:CNTK.proto.Dictionary.data)
  return data_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::CNTK::proto::DictionaryValue >*
Dictionary::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:CNTK.proto.Dictionary.data)
  return data_.MutableMap();
}

inline const Dictionary* Dictionary::internal_default_instance() {
  return &Dictionary_default_instance_.get();
}
// -------------------------------------------------------------------

// DictionaryValue

// optional uint64 version = 1;
inline void DictionaryValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DictionaryValue::version() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.version)
  return version_;
}
inline void DictionaryValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.version)
}

// optional .CNTK.proto.DictionaryValue.Type value_type = 2;
inline void DictionaryValue::clear_value_type() {
  value_type_ = 0;
}
inline ::CNTK::proto::DictionaryValue_Type DictionaryValue::value_type() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.value_type)
  return static_cast< ::CNTK::proto::DictionaryValue_Type >(value_type_);
}
inline void DictionaryValue::set_value_type(::CNTK::proto::DictionaryValue_Type value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.value_type)
}

// optional bool bool_value = 3;
inline bool DictionaryValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void DictionaryValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void DictionaryValue::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool DictionaryValue::bool_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void DictionaryValue::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.bool_value)
}

// optional int32 int_value = 4;
inline bool DictionaryValue::has_int_value() const {
  return value_case() == kIntValue;
}
inline void DictionaryValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void DictionaryValue::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 DictionaryValue::int_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return 0;
}
inline void DictionaryValue::set_int_value(::google::protobuf::int32 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.int_value)
}

// optional uint64 size_t_value = 5;
inline bool DictionaryValue::has_size_t_value() const {
  return value_case() == kSizeTValue;
}
inline void DictionaryValue::set_has_size_t_value() {
  _oneof_case_[0] = kSizeTValue;
}
inline void DictionaryValue::clear_size_t_value() {
  if (has_size_t_value()) {
    value_.size_t_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 DictionaryValue::size_t_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.size_t_value)
  if (has_size_t_value()) {
    return value_.size_t_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void DictionaryValue::set_size_t_value(::google::protobuf::uint64 value) {
  if (!has_size_t_value()) {
    clear_value();
    set_has_size_t_value();
  }
  value_.size_t_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.size_t_value)
}

// optional float float_value = 6;
inline bool DictionaryValue::has_float_value() const {
  return value_case() == kFloatValue;
}
inline void DictionaryValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void DictionaryValue::clear_float_value() {
  if (has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float DictionaryValue::float_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.float_value)
  if (has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void DictionaryValue::set_float_value(float value) {
  if (!has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.float_value)
}

// optional double double_value = 7;
inline bool DictionaryValue::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void DictionaryValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void DictionaryValue::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double DictionaryValue::double_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void DictionaryValue::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.double_value)
}

// optional string string_value = 8;
inline bool DictionaryValue::has_string_value() const {
  return value_case() == kStringValue;
}
inline void DictionaryValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void DictionaryValue::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& DictionaryValue::string_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DictionaryValue::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.string_value)
}
inline void DictionaryValue::set_string_value(const char* value) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNTK.proto.DictionaryValue.string_value)
}
inline void DictionaryValue::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNTK.proto.DictionaryValue.string_value)
}
inline ::std::string* DictionaryValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictionaryValue::release_string_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DictionaryValue::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.string_value)
}

// optional .CNTK.proto.NDShape nd_shape_value = 9;
inline bool DictionaryValue::has_nd_shape_value() const {
  return value_case() == kNdShapeValue;
}
inline void DictionaryValue::set_has_nd_shape_value() {
  _oneof_case_[0] = kNdShapeValue;
}
inline void DictionaryValue::clear_nd_shape_value() {
  if (has_nd_shape_value()) {
    delete value_.nd_shape_value_;
    clear_has_value();
  }
}
inline  const ::CNTK::proto::NDShape& DictionaryValue::nd_shape_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.nd_shape_value)
  return has_nd_shape_value()
      ? *value_.nd_shape_value_
      : ::CNTK::proto::NDShape::default_instance();
}
inline ::CNTK::proto::NDShape* DictionaryValue::mutable_nd_shape_value() {
  if (!has_nd_shape_value()) {
    clear_value();
    set_has_nd_shape_value();
    value_.nd_shape_value_ = new ::CNTK::proto::NDShape;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.nd_shape_value)
  return value_.nd_shape_value_;
}
inline ::CNTK::proto::NDShape* DictionaryValue::release_nd_shape_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.nd_shape_value)
  if (has_nd_shape_value()) {
    clear_has_value();
    ::CNTK::proto::NDShape* temp = value_.nd_shape_value_;
    value_.nd_shape_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DictionaryValue::set_allocated_nd_shape_value(::CNTK::proto::NDShape* nd_shape_value) {
  clear_value();
  if (nd_shape_value) {
    set_has_nd_shape_value();
    value_.nd_shape_value_ = nd_shape_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.nd_shape_value)
}

// optional .CNTK.proto.Axis axis_value = 10;
inline bool DictionaryValue::has_axis_value() const {
  return value_case() == kAxisValue;
}
inline void DictionaryValue::set_has_axis_value() {
  _oneof_case_[0] = kAxisValue;
}
inline void DictionaryValue::clear_axis_value() {
  if (has_axis_value()) {
    delete value_.axis_value_;
    clear_has_value();
  }
}
inline  const ::CNTK::proto::Axis& DictionaryValue::axis_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.axis_value)
  return has_axis_value()
      ? *value_.axis_value_
      : ::CNTK::proto::Axis::default_instance();
}
inline ::CNTK::proto::Axis* DictionaryValue::mutable_axis_value() {
  if (!has_axis_value()) {
    clear_value();
    set_has_axis_value();
    value_.axis_value_ = new ::CNTK::proto::Axis;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.axis_value)
  return value_.axis_value_;
}
inline ::CNTK::proto::Axis* DictionaryValue::release_axis_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.axis_value)
  if (has_axis_value()) {
    clear_has_value();
    ::CNTK::proto::Axis* temp = value_.axis_value_;
    value_.axis_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DictionaryValue::set_allocated_axis_value(::CNTK::proto::Axis* axis_value) {
  clear_value();
  if (axis_value) {
    set_has_axis_value();
    value_.axis_value_ = axis_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.axis_value)
}

// optional .CNTK.proto.Vector vector_value = 11;
inline bool DictionaryValue::has_vector_value() const {
  return value_case() == kVectorValue;
}
inline void DictionaryValue::set_has_vector_value() {
  _oneof_case_[0] = kVectorValue;
}
inline void DictionaryValue::clear_vector_value() {
  if (has_vector_value()) {
    delete value_.vector_value_;
    clear_has_value();
  }
}
inline  const ::CNTK::proto::Vector& DictionaryValue::vector_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.vector_value)
  return has_vector_value()
      ? *value_.vector_value_
      : ::CNTK::proto::Vector::default_instance();
}
inline ::CNTK::proto::Vector* DictionaryValue::mutable_vector_value() {
  if (!has_vector_value()) {
    clear_value();
    set_has_vector_value();
    value_.vector_value_ = new ::CNTK::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.vector_value)
  return value_.vector_value_;
}
inline ::CNTK::proto::Vector* DictionaryValue::release_vector_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.vector_value)
  if (has_vector_value()) {
    clear_has_value();
    ::CNTK::proto::Vector* temp = value_.vector_value_;
    value_.vector_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DictionaryValue::set_allocated_vector_value(::CNTK::proto::Vector* vector_value) {
  clear_value();
  if (vector_value) {
    set_has_vector_value();
    value_.vector_value_ = vector_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.vector_value)
}

// optional .CNTK.proto.Dictionary dictionary_value = 12;
inline bool DictionaryValue::has_dictionary_value() const {
  return value_case() == kDictionaryValue;
}
inline void DictionaryValue::set_has_dictionary_value() {
  _oneof_case_[0] = kDictionaryValue;
}
inline void DictionaryValue::clear_dictionary_value() {
  if (has_dictionary_value()) {
    delete value_.dictionary_value_;
    clear_has_value();
  }
}
inline  const ::CNTK::proto::Dictionary& DictionaryValue::dictionary_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.dictionary_value)
  return has_dictionary_value()
      ? *value_.dictionary_value_
      : ::CNTK::proto::Dictionary::default_instance();
}
inline ::CNTK::proto::Dictionary* DictionaryValue::mutable_dictionary_value() {
  if (!has_dictionary_value()) {
    clear_value();
    set_has_dictionary_value();
    value_.dictionary_value_ = new ::CNTK::proto::Dictionary;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.dictionary_value)
  return value_.dictionary_value_;
}
inline ::CNTK::proto::Dictionary* DictionaryValue::release_dictionary_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.dictionary_value)
  if (has_dictionary_value()) {
    clear_has_value();
    ::CNTK::proto::Dictionary* temp = value_.dictionary_value_;
    value_.dictionary_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DictionaryValue::set_allocated_dictionary_value(::CNTK::proto::Dictionary* dictionary_value) {
  clear_value();
  if (dictionary_value) {
    set_has_dictionary_value();
    value_.dictionary_value_ = dictionary_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.dictionary_value)
}

// optional .CNTK.proto.NDArrayView nd_array_view_value = 13;
inline bool DictionaryValue::has_nd_array_view_value() const {
  return value_case() == kNdArrayViewValue;
}
inline void DictionaryValue::set_has_nd_array_view_value() {
  _oneof_case_[0] = kNdArrayViewValue;
}
inline void DictionaryValue::clear_nd_array_view_value() {
  if (has_nd_array_view_value()) {
    delete value_.nd_array_view_value_;
    clear_has_value();
  }
}
inline  const ::CNTK::proto::NDArrayView& DictionaryValue::nd_array_view_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.nd_array_view_value)
  return has_nd_array_view_value()
      ? *value_.nd_array_view_value_
      : ::CNTK::proto::NDArrayView::default_instance();
}
inline ::CNTK::proto::NDArrayView* DictionaryValue::mutable_nd_array_view_value() {
  if (!has_nd_array_view_value()) {
    clear_value();
    set_has_nd_array_view_value();
    value_.nd_array_view_value_ = new ::CNTK::proto::NDArrayView;
  }
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.nd_array_view_value)
  return value_.nd_array_view_value_;
}
inline ::CNTK::proto::NDArrayView* DictionaryValue::release_nd_array_view_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.nd_array_view_value)
  if (has_nd_array_view_value()) {
    clear_has_value();
    ::CNTK::proto::NDArrayView* temp = value_.nd_array_view_value_;
    value_.nd_array_view_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DictionaryValue::set_allocated_nd_array_view_value(::CNTK::proto::NDArrayView* nd_array_view_value) {
  clear_value();
  if (nd_array_view_value) {
    set_has_nd_array_view_value();
    value_.nd_array_view_value_ = nd_array_view_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.nd_array_view_value)
}

inline bool DictionaryValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void DictionaryValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline DictionaryValue::ValueCase DictionaryValue::value_case() const {
  return DictionaryValue::ValueCase(_oneof_case_[0]);
}
inline const DictionaryValue* DictionaryValue::internal_default_instance() {
  return &DictionaryValue_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace CNTK

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CNTK::proto::NDArrayView_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CNTK::proto::NDArrayView_DataType>() {
  return ::CNTK::proto::NDArrayView_DataType_descriptor();
}
template <> struct is_proto_enum< ::CNTK::proto::NDArrayView_StorageFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CNTK::proto::NDArrayView_StorageFormat>() {
  return ::CNTK::proto::NDArrayView_StorageFormat_descriptor();
}
template <> struct is_proto_enum< ::CNTK::proto::DictionaryValue_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CNTK::proto::DictionaryValue_Type>() {
  return ::CNTK::proto::DictionaryValue_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CNTK_2eproto__INCLUDED
